
TelemetryBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002948  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b20  08002b20  00003b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b40  08002b40  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b40  08002b40  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b40  08002b40  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b40  08002b40  00003b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b44  08002b44  00003b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b48  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d44  2000000c  08002b54  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d50  08002b54  00004d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c88  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d8  00000000  00000000  0000ccc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0000e5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000675  00000000  00000000  0000ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002440f  00000000  00000000  0000f4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009357  00000000  00000000  000338dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5d86  00000000  00000000  0003cc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001229b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002244  00000000  00000000  001229fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00124c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002b08 	.word	0x08002b08

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002b08 	.word	0x08002b08

08000218 <HAL_FDCAN_RxFifo0Callback>:
CAN_Message MessageBuffer[256];
uint8_t MessageBufferIndex = 0;


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d069      	beq.n	8000300 <HAL_FDCAN_RxFifo0Callback+0xe8>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK)
 800022c:	4b36      	ldr	r3, [pc, #216]	@ (8000308 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 800022e:	4a37      	ldr	r2, [pc, #220]	@ (800030c <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000230:	2140      	movs	r1, #64	@ 0x40
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 fec2 	bl	8000fbc <HAL_FDCAN_GetRxMessage>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d002      	beq.n	8000244 <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
    /* Reception Error */
    Error_Handler();
 800023e:	f000 fa15 	bl	800066c <Error_Handler>
 8000242:	e053      	b.n	80002ec <HAL_FDCAN_RxFifo0Callback+0xd4>
    }
    else{

            MessageBuffer[MessageBufferIndex].Id = RxHeader.Identifier;
 8000244:	4b31      	ldr	r3, [pc, #196]	@ (800030c <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	4b31      	ldr	r3, [pc, #196]	@ (8000310 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4619      	mov	r1, r3
 800024e:	b290      	uxth	r0, r2
 8000250:	4a30      	ldr	r2, [pc, #192]	@ (8000314 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 8000252:	460b      	mov	r3, r1
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	440b      	add	r3, r1
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	4413      	add	r3, r2
 800025c:	4602      	mov	r2, r0
 800025e:	801a      	strh	r2, [r3, #0]
            MessageBuffer[MessageBufferIndex].DLC = RxHeader.DataLength;
 8000260:	4b2a      	ldr	r3, [pc, #168]	@ (800030c <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000262:	68da      	ldr	r2, [r3, #12]
 8000264:	4b2a      	ldr	r3, [pc, #168]	@ (8000310 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4619      	mov	r1, r3
 800026a:	b2d0      	uxtb	r0, r2
 800026c:	4a29      	ldr	r2, [pc, #164]	@ (8000314 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 800026e:	460b      	mov	r3, r1
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	440b      	add	r3, r1
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	3302      	adds	r3, #2
 800027a:	4602      	mov	r2, r0
 800027c:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < RxHeader.DataLength; i++)
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e014      	b.n	80002ae <HAL_FDCAN_RxFifo0Callback+0x96>
            {
                MessageBuffer[MessageBufferIndex].Bytes[i] = CAN_RxData[i];
 8000284:	4b22      	ldr	r3, [pc, #136]	@ (8000310 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	4619      	mov	r1, r3
 800028a:	4a1f      	ldr	r2, [pc, #124]	@ (8000308 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4413      	add	r3, r2
 8000290:	7818      	ldrb	r0, [r3, #0]
 8000292:	4a20      	ldr	r2, [pc, #128]	@ (8000314 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 8000294:	460b      	mov	r3, r1
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	440b      	add	r3, r1
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	441a      	add	r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	4413      	add	r3, r2
 80002a2:	3303      	adds	r3, #3
 80002a4:	4602      	mov	r2, r0
 80002a6:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < RxHeader.DataLength; i++)
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	3301      	adds	r3, #1
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	4b17      	ldr	r3, [pc, #92]	@ (800030c <HAL_FDCAN_RxFifo0Callback+0xf4>)
 80002b0:	68da      	ldr	r2, [r3, #12]
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d8e5      	bhi.n	8000284 <HAL_FDCAN_RxFifo0Callback+0x6c>
            }
            MessageBuffer[MessageBufferIndex].CanNbr = (hfdcan->Instance == FDCAN2) ? 1 : 2;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a16      	ldr	r2, [pc, #88]	@ (8000318 <HAL_FDCAN_RxFifo0Callback+0x100>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d101      	bne.n	80002c6 <HAL_FDCAN_RxFifo0Callback+0xae>
 80002c2:	2001      	movs	r0, #1
 80002c4:	e000      	b.n	80002c8 <HAL_FDCAN_RxFifo0Callback+0xb0>
 80002c6:	2002      	movs	r0, #2
 80002c8:	4b11      	ldr	r3, [pc, #68]	@ (8000310 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4619      	mov	r1, r3
 80002ce:	4a11      	ldr	r2, [pc, #68]	@ (8000314 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 80002d0:	460b      	mov	r3, r1
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	440b      	add	r3, r1
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	330b      	adds	r3, #11
 80002dc:	4602      	mov	r2, r0
 80002de:	701a      	strb	r2, [r3, #0]
            MessageBufferIndex++;
 80002e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	3301      	adds	r3, #1
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80002ea:	701a      	strb	r2, [r3, #0]
   
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f000 ff6b 	bl	80011cc <HAL_FDCAN_ActivateNotification>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <HAL_FDCAN_RxFifo0Callback+0xe8>
    {
      /* Notification Error */
      Error_Handler();
 80002fc:	f000 f9b6 	bl	800066c <Error_Handler>
    }
  }
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000028 	.word	0x20000028
 800030c:	20000d20 	.word	0x20000d20
 8000310:	20000c30 	.word	0x20000c30
 8000314:	20000030 	.word	0x20000030
 8000318:	40006800 	.word	0x40006800

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000320:	f000 fb0f 	bl	8000942 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000324:	f000 f808 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000328:	f000 f93c 	bl	80005a4 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800032c:	f000 f844 	bl	80003b8 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8000330:	f000 f8cc 	bl	80004cc <MX_FDCAN3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000334:	bf00      	nop
 8000336:	e7fd      	b.n	8000334 <main+0x18>

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b094      	sub	sp, #80	@ 0x50
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2238      	movs	r2, #56	@ 0x38
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fbb2 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800035a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800035e:	f001 fbaf 	bl	8001ac0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000362:	2302      	movs	r3, #2
 8000364:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000366:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800036a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036c:	2340      	movs	r3, #64	@ 0x40
 800036e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000370:	2300      	movs	r3, #0
 8000372:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	f107 0318 	add.w	r3, r7, #24
 8000378:	4618      	mov	r0, r3
 800037a:	f001 fc55 	bl	8001c28 <HAL_RCC_OscConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000384:	f000 f972 	bl	800066c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	230f      	movs	r3, #15
 800038a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038c:	2301      	movs	r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 ff53 	bl	800224c <HAL_RCC_ClockConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003ac:	f000 f95e 	bl	800066c <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	3750      	adds	r7, #80	@ 0x50
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80003bc:	4b40      	ldr	r3, [pc, #256]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003be:	4a41      	ldr	r2, [pc, #260]	@ (80004c4 <MX_FDCAN2_Init+0x10c>)
 80003c0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003c2:	4b3f      	ldr	r3, [pc, #252]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003c8:	4b3d      	ldr	r3, [pc, #244]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80003ce:	4b3c      	ldr	r3, [pc, #240]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80003d4:	4b3a      	ldr	r3, [pc, #232]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80003da:	4b39      	ldr	r3, [pc, #228]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003dc:	2200      	movs	r2, #0
 80003de:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80003e0:	4b37      	ldr	r3, [pc, #220]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80003e6:	4b36      	ldr	r3, [pc, #216]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80003ec:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 80003f2:	4b33      	ldr	r3, [pc, #204]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003f4:	220d      	movs	r2, #13
 80003f6:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80003f8:	4b31      	ldr	r3, [pc, #196]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 80003fa:	2202      	movs	r2, #2
 80003fc:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80003fe:	4b30      	ldr	r3, [pc, #192]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 8000400:	2201      	movs	r2, #1
 8000402:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000404:	4b2e      	ldr	r3, [pc, #184]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 8000406:	2201      	movs	r2, #1
 8000408:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800040a:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 800040c:	2201      	movs	r2, #1
 800040e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000410:	4b2b      	ldr	r3, [pc, #172]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 8000412:	2201      	movs	r2, #1
 8000414:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 28;
 8000416:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 8000418:	221c      	movs	r2, #28
 800041a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800041c:	4b28      	ldr	r3, [pc, #160]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 800041e:	2200      	movs	r2, #0
 8000420:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000422:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 8000424:	2200      	movs	r2, #0
 8000426:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000428:	4825      	ldr	r0, [pc, #148]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 800042a:	f000 fc0b 	bl	8000c44 <HAL_FDCAN_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000434:	f000 f91a 	bl	800066c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan2, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8000438:	2201      	movs	r2, #1
 800043a:	2140      	movs	r1, #64	@ 0x40
 800043c:	4820      	ldr	r0, [pc, #128]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 800043e:	f000 fd5b 	bl	8000ef8 <HAL_FDCAN_ConfigRxFifoOverwrite>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_FDCAN2_Init+0x94>
    {
      Error_Handler();
 8000448:	f000 f910 	bl	800066c <Error_Handler>
    }
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan2, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 800044c:	2201      	movs	r2, #1
 800044e:	2141      	movs	r1, #65	@ 0x41
 8000450:	481b      	ldr	r0, [pc, #108]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 8000452:	f000 fd51 	bl	8000ef8 <HAL_FDCAN_ConfigRxFifoOverwrite>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_FDCAN2_Init+0xa8>
    {
      Error_Handler();
 800045c:	f000 f906 	bl	800066c <Error_Handler>
    }


  if(HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8000460:	4817      	ldr	r0, [pc, #92]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 8000462:	f000 fd82 	bl	8000f6a <HAL_FDCAN_Start>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_FDCAN2_Init+0xb8>
    {
      Error_Handler();
 800046c:	f000 f8fe 	bl	800066c <Error_Handler>
    }
  if(HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000470:	2200      	movs	r2, #0
 8000472:	2101      	movs	r1, #1
 8000474:	4812      	ldr	r0, [pc, #72]	@ (80004c0 <MX_FDCAN2_Init+0x108>)
 8000476:	f000 fea9 	bl	80011cc <HAL_FDCAN_ActivateNotification>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_FDCAN2_Init+0xcc>
    {
      Error_Handler();
 8000480:	f000 f8f4 	bl	800066c <Error_Handler>
    }

  TxHeader.Identifier = 0x123; // Modify this with your identifier
 8000484:	4b10      	ldr	r3, [pc, #64]	@ (80004c8 <MX_FDCAN2_Init+0x110>)
 8000486:	f240 1223 	movw	r2, #291	@ 0x123
 800048a:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800048c:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <MX_FDCAN2_Init+0x110>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000492:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <MX_FDCAN2_Init+0x110>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000498:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <MX_FDCAN2_Init+0x110>)
 800049a:	2208      	movs	r2, #8
 800049c:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800049e:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <MX_FDCAN2_Init+0x110>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80004a4:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <MX_FDCAN2_Init+0x110>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80004aa:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <MX_FDCAN2_Init+0x110>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80004b0:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <MX_FDCAN2_Init+0x110>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80004b6:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <MX_FDCAN2_Init+0x110>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000c34 	.word	0x20000c34
 80004c4:	40006800 	.word	0x40006800
 80004c8:	20000cfc 	.word	0x20000cfc

080004cc <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80004d0:	4b32      	ldr	r3, [pc, #200]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 80004d2:	4a33      	ldr	r2, [pc, #204]	@ (80005a0 <MX_FDCAN3_Init+0xd4>)
 80004d4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80004d6:	4b31      	ldr	r3, [pc, #196]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004dc:	4b2f      	ldr	r3, [pc, #188]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80004e2:	4b2e      	ldr	r3, [pc, #184]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 80004e8:	4b2c      	ldr	r3, [pc, #176]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80004ee:	4b2b      	ldr	r3, [pc, #172]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80004f4:	4b29      	ldr	r3, [pc, #164]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 80004fa:	4b28      	ldr	r3, [pc, #160]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000500:	4b26      	ldr	r3, [pc, #152]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 8000502:	2201      	movs	r2, #1
 8000504:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 13;
 8000506:	4b25      	ldr	r3, [pc, #148]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 8000508:	220d      	movs	r2, #13
 800050a:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800050c:	4b23      	ldr	r3, [pc, #140]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 800050e:	2202      	movs	r2, #2
 8000510:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000512:	4b22      	ldr	r3, [pc, #136]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 8000514:	2201      	movs	r2, #1
 8000516:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000518:	4b20      	ldr	r3, [pc, #128]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 800051a:	2201      	movs	r2, #1
 800051c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800051e:	4b1f      	ldr	r3, [pc, #124]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 8000520:	2201      	movs	r2, #1
 8000522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000524:	4b1d      	ldr	r3, [pc, #116]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 8000526:	2201      	movs	r2, #1
 8000528:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 28;
 800052a:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 800052c:	221c      	movs	r2, #28
 800052e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000530:	4b1a      	ldr	r3, [pc, #104]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 8000532:	2200      	movs	r2, #0
 8000534:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000536:	4b19      	ldr	r3, [pc, #100]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 8000538:	2200      	movs	r2, #0
 800053a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 800053c:	4817      	ldr	r0, [pc, #92]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 800053e:	f000 fb81 	bl	8000c44 <HAL_FDCAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8000548:	f000 f890 	bl	800066c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan3, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 800054c:	2201      	movs	r2, #1
 800054e:	2140      	movs	r1, #64	@ 0x40
 8000550:	4812      	ldr	r0, [pc, #72]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 8000552:	f000 fcd1 	bl	8000ef8 <HAL_FDCAN_ConfigRxFifoOverwrite>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_FDCAN3_Init+0x94>
    {
      Error_Handler();
 800055c:	f000 f886 	bl	800066c <Error_Handler>
    }
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan3, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8000560:	2201      	movs	r2, #1
 8000562:	2141      	movs	r1, #65	@ 0x41
 8000564:	480d      	ldr	r0, [pc, #52]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 8000566:	f000 fcc7 	bl	8000ef8 <HAL_FDCAN_ConfigRxFifoOverwrite>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_FDCAN3_Init+0xa8>
    {
      Error_Handler();
 8000570:	f000 f87c 	bl	800066c <Error_Handler>
    }


  if(HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 8000574:	4809      	ldr	r0, [pc, #36]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 8000576:	f000 fcf8 	bl	8000f6a <HAL_FDCAN_Start>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_FDCAN3_Init+0xb8>
    {
      Error_Handler();
 8000580:	f000 f874 	bl	800066c <Error_Handler>
    }
  if(HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000584:	2200      	movs	r2, #0
 8000586:	2101      	movs	r1, #1
 8000588:	4804      	ldr	r0, [pc, #16]	@ (800059c <MX_FDCAN3_Init+0xd0>)
 800058a:	f000 fe1f 	bl	80011cc <HAL_FDCAN_ActivateNotification>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_FDCAN3_Init+0xcc>
    {
      Error_Handler();
 8000594:	f000 f86a 	bl	800066c <Error_Handler>
    }
  /* USER CODE END FDCAN3_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000c98 	.word	0x20000c98
 80005a0:	40006c00 	.word	0x40006c00

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <MX_GPIO_Init+0xbc>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	4a28      	ldr	r2, [pc, #160]	@ (8000660 <MX_GPIO_Init+0xbc>)
 80005c0:	f043 0302 	orr.w	r3, r3, #2
 80005c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c6:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <MX_GPIO_Init+0xbc>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b23      	ldr	r3, [pc, #140]	@ (8000660 <MX_GPIO_Init+0xbc>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	4a22      	ldr	r2, [pc, #136]	@ (8000660 <MX_GPIO_Init+0xbc>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005de:	4b20      	ldr	r3, [pc, #128]	@ (8000660 <MX_GPIO_Init+0xbc>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <MX_GPIO_Init+0xbc>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000660 <MX_GPIO_Init+0xbc>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000660 <MX_GPIO_Init+0xbc>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000608:	4816      	ldr	r0, [pc, #88]	@ (8000664 <MX_GPIO_Init+0xc0>)
 800060a:	f001 fa41 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000614:	4814      	ldr	r0, [pc, #80]	@ (8000668 <MX_GPIO_Init+0xc4>)
 8000616:	f001 fa3b 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800061a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_GPIO_Init+0xc0>)
 8000634:	f001 f8aa 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000638:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_GPIO_Init+0xc4>)
 8000652:	f001 f89b 	bl	800178c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000
 8000664:	48000800 	.word	0x48000800
 8000668:	48000400 	.word	0x48000400

0800066c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
}
 8000672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <Error_Handler+0x8>

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <HAL_MspInit+0x44>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000682:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <HAL_MspInit+0x44>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6613      	str	r3, [r2, #96]	@ 0x60
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <HAL_MspInit+0x44>)
 800068c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <HAL_MspInit+0x44>)
 8000698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800069a:	4a08      	ldr	r2, [pc, #32]	@ (80006bc <HAL_MspInit+0x44>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <HAL_MspInit+0x44>)
 80006a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006ae:	f001 faab 	bl	8001c08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0a0      	sub	sp, #128	@ 0x80
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	f107 0318 	add.w	r3, r7, #24
 80006dc:	2254      	movs	r2, #84	@ 0x54
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 f9e5 	bl	8002ab0 <memset>
  if(hfdcan->Instance==FDCAN2)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a51      	ldr	r2, [pc, #324]	@ (8000830 <HAL_FDCAN_MspInit+0x170>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d14a      	bne.n	8000786 <HAL_FDCAN_MspInit+0xc6>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006fa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fc:	f107 0318 	add.w	r3, r7, #24
 8000700:	4618      	mov	r0, r3
 8000702:	f001 ff87 	bl	8002614 <HAL_RCCEx_PeriphCLKConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800070c:	f7ff ffae 	bl	800066c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000710:	4b48      	ldr	r3, [pc, #288]	@ (8000834 <HAL_FDCAN_MspInit+0x174>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a47      	ldr	r2, [pc, #284]	@ (8000834 <HAL_FDCAN_MspInit+0x174>)
 8000718:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800071a:	4b46      	ldr	r3, [pc, #280]	@ (8000834 <HAL_FDCAN_MspInit+0x174>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10b      	bne.n	800073a <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000722:	4b45      	ldr	r3, [pc, #276]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000726:	4a44      	ldr	r2, [pc, #272]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 8000728:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800072c:	6593      	str	r3, [r2, #88]	@ 0x58
 800072e:	4b42      	ldr	r3, [pc, #264]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b3f      	ldr	r3, [pc, #252]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a3e      	ldr	r2, [pc, #248]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b3c      	ldr	r3, [pc, #240]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000752:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000756:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000764:	2309      	movs	r3, #9
 8000766:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800076c:	4619      	mov	r1, r3
 800076e:	4833      	ldr	r0, [pc, #204]	@ (800083c <HAL_FDCAN_MspInit+0x17c>)
 8000770:	f001 f80c 	bl	800178c <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2056      	movs	r0, #86	@ 0x56
 800077a:	f000 fa2e 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800077e:	2056      	movs	r0, #86	@ 0x56
 8000780:	f000 fa45 	bl	8000c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000784:	e04f      	b.n	8000826 <HAL_FDCAN_MspInit+0x166>
  else if(hfdcan->Instance==FDCAN3)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a2d      	ldr	r2, [pc, #180]	@ (8000840 <HAL_FDCAN_MspInit+0x180>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d14a      	bne.n	8000826 <HAL_FDCAN_MspInit+0x166>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000794:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000796:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800079a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079c:	f107 0318 	add.w	r3, r7, #24
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 ff37 	bl	8002614 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_FDCAN_MspInit+0xf0>
      Error_Handler();
 80007ac:	f7ff ff5e 	bl	800066c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80007b0:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <HAL_FDCAN_MspInit+0x174>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000834 <HAL_FDCAN_MspInit+0x174>)
 80007b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80007ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <HAL_FDCAN_MspInit+0x174>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10b      	bne.n	80007da <HAL_FDCAN_MspInit+0x11a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 80007c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a16      	ldr	r2, [pc, #88]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <HAL_FDCAN_MspInit+0x178>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80007f2:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80007f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000804:	230b      	movs	r3, #11
 8000806:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800080c:	4619      	mov	r1, r3
 800080e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000812:	f000 ffbb 	bl	800178c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2058      	movs	r0, #88	@ 0x58
 800081c:	f000 f9dd 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8000820:	2058      	movs	r0, #88	@ 0x58
 8000822:	f000 f9f4 	bl	8000c0e <HAL_NVIC_EnableIRQ>
}
 8000826:	bf00      	nop
 8000828:	3780      	adds	r7, #128	@ 0x80
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40006800 	.word	0x40006800
 8000834:	20000d48 	.word	0x20000d48
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400
 8000840:	40006c00 	.word	0x40006c00

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <NMI_Handler+0x4>

0800084c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <MemManage_Handler+0x4>

0800085c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <UsageFault_Handler+0x4>

0800086c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089a:	f000 f8a5 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80008a8:	4802      	ldr	r0, [pc, #8]	@ (80008b4 <FDCAN2_IT0_IRQHandler+0x10>)
 80008aa:	f000 fd75 	bl	8001398 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000c34 	.word	0x20000c34

080008b8 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80008bc:	4802      	ldr	r0, [pc, #8]	@ (80008c8 <FDCAN3_IT0_IRQHandler+0x10>)
 80008be:	f000 fd6b 	bl	8001398 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000c98 	.word	0x20000c98

080008cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f0:	480d      	ldr	r0, [pc, #52]	@ (8000928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f4:	f7ff ffea 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	@ (800092c <LoopForever+0x6>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	@ (8000930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <LoopForever+0xe>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	@ (800093c <LoopForever+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f002 f8cf 	bl	8002ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000922:	f7ff fcfb 	bl	800031c <main>

08000926 <LoopForever>:

LoopForever:
    b LoopForever
 8000926:	e7fe      	b.n	8000926 <LoopForever>
  ldr   r0, =_estack
 8000928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000934:	08002b48 	.word	0x08002b48
  ldr r2, =_sbss
 8000938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800093c:	20000d50 	.word	0x20000d50

08000940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_2_IRQHandler>

08000942 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000948:	2300      	movs	r3, #0
 800094a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f939 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f80e 	bl	8000974 <HAL_InitTick>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e001      	b.n	8000968 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000964:	f7ff fe88 	bl	8000678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000968:	79fb      	ldrb	r3, [r7, #7]

}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <HAL_InitTick+0x68>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d022      	beq.n	80009ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <HAL_InitTick+0x6c>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <HAL_InitTick+0x68>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000994:	fbb1 f3f3 	udiv	r3, r1, r3
 8000998:	fbb2 f3f3 	udiv	r3, r2, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f944 	bl	8000c2a <HAL_SYSTICK_Config>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10f      	bne.n	80009c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b0f      	cmp	r3, #15
 80009ac:	d809      	bhi.n	80009c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ae:	2200      	movs	r2, #0
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	f04f 30ff 	mov.w	r0, #4294967295
 80009b6:	f000 f910 	bl	8000bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_InitTick+0x70>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	e007      	b.n	80009d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
 80009c6:	e004      	b.n	80009d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	e001      	b.n	80009d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_IncTick+0x1c>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <HAL_IncTick+0x20>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a03      	ldr	r2, [pc, #12]	@ (8000a04 <HAL_IncTick+0x1c>)
 80009f8:	6013      	str	r3, [r2, #0]
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000d4c 	.word	0x20000d4c
 8000a08:	20000008 	.word	0x20000008

08000a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a10:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <HAL_GetTick+0x14>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000d4c 	.word	0x20000d4c

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4907      	ldr	r1, [pc, #28]	@ (8000ac0 <__NVIC_EnableIRQ+0x38>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	@ 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	@ 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f7ff ff8e 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff29 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be8:	f7ff ff40 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f7ff ff90 	bl	8000b18 <NVIC_EncodePriority>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5f 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff33 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ffa4 	bl	8000b80 <SysTick_Config>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e147      	b.n	8000ee6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d106      	bne.n	8000c70 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fd28 	bl	80006c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	699a      	ldr	r2, [r3, #24]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0210 	bic.w	r2, r2, #16
 8000c7e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c80:	f7ff fec4 	bl	8000a0c <HAL_GetTick>
 8000c84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c86:	e012      	b.n	8000cae <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c88:	f7ff fec0 	bl	8000a0c <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b0a      	cmp	r3, #10
 8000c94:	d90b      	bls.n	8000cae <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9a:	f043 0201 	orr.w	r2, r3, #1
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e11b      	b.n	8000ee6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d0e5      	beq.n	8000c88 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	699a      	ldr	r2, [r3, #24]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f042 0201 	orr.w	r2, r2, #1
 8000cca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ccc:	f7ff fe9e 	bl	8000a0c <HAL_GetTick>
 8000cd0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000cd2:	e012      	b.n	8000cfa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000cd4:	f7ff fe9a 	bl	8000a0c <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b0a      	cmp	r3, #10
 8000ce0:	d90b      	bls.n	8000cfa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce6:	f043 0201 	orr.w	r2, r3, #1
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e0f5      	b.n	8000ee6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0e5      	beq.n	8000cd4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	699a      	ldr	r2, [r3, #24]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0202 	orr.w	r2, r2, #2
 8000d16:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a74      	ldr	r2, [pc, #464]	@ (8000ef0 <HAL_FDCAN_Init+0x2ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d103      	bne.n	8000d2a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000d22:	4a74      	ldr	r2, [pc, #464]	@ (8000ef4 <HAL_FDCAN_Init+0x2b0>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7c1b      	ldrb	r3, [r3, #16]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d108      	bne.n	8000d44 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	699a      	ldr	r2, [r3, #24]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d40:	619a      	str	r2, [r3, #24]
 8000d42:	e007      	b.n	8000d54 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	699a      	ldr	r2, [r3, #24]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d52:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7c5b      	ldrb	r3, [r3, #17]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d108      	bne.n	8000d6e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	699a      	ldr	r2, [r3, #24]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000d6a:	619a      	str	r2, [r3, #24]
 8000d6c:	e007      	b.n	8000d7e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	699a      	ldr	r2, [r3, #24]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000d7c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7c9b      	ldrb	r3, [r3, #18]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d108      	bne.n	8000d98 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	699a      	ldr	r2, [r3, #24]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000d94:	619a      	str	r2, [r3, #24]
 8000d96:	e007      	b.n	8000da8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	699a      	ldr	r2, [r3, #24]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000da6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	699a      	ldr	r2, [r3, #24]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000dcc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0210 	bic.w	r2, r2, #16
 8000ddc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d108      	bne.n	8000df8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	699a      	ldr	r2, [r3, #24]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 0204 	orr.w	r2, r2, #4
 8000df4:	619a      	str	r2, [r3, #24]
 8000df6:	e02c      	b.n	8000e52 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d028      	beq.n	8000e52 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d01c      	beq.n	8000e42 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	699a      	ldr	r2, [r3, #24]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e16:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0210 	orr.w	r2, r2, #16
 8000e26:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d110      	bne.n	8000e52 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	699a      	ldr	r2, [r3, #24]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0220 	orr.w	r2, r2, #32
 8000e3e:	619a      	str	r2, [r3, #24]
 8000e40:	e007      	b.n	8000e52 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	699a      	ldr	r2, [r3, #24]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0220 	orr.w	r2, r2, #32
 8000e50:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e62:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e6a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e7a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e7c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000e86:	d115      	bne.n	8000eb4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e8c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e92:	3b01      	subs	r3, #1
 8000e94:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e96:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000ea0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000eb0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000eb2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 fbf2 	bl	80016b4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40006400 	.word	0x40006400
 8000ef4:	40006500 	.word	0x40006500

08000ef8 <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d11f      	bne.n	8000f50 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	2b40      	cmp	r3, #64	@ 0x40
 8000f14:	d10d      	bne.n	8000f32 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f1e:	f423 7100 	bic.w	r1, r3, #512	@ 0x200
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	025a      	lsls	r2, r3, #9
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f30:	e00c      	b.n	8000f4c <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f3a:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	021a      	lsls	r2, r3, #8
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* Return function status */
    return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e006      	b.n	8000f5e <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f54:	f043 0204 	orr.w	r2, r3, #4
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
  }
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d110      	bne.n	8000fa0 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2202      	movs	r2, #2
 8000f82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	699a      	ldr	r2, [r3, #24]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0201 	bic.w	r2, r2, #1
 8000f94:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e006      	b.n	8000fae <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa4:	f043 0204 	orr.w	r2, r3, #4
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
  }
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b08b      	sub	sp, #44	@ 0x2c
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000fd4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000fd6:	7efb      	ldrb	r3, [r7, #27]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	f040 80e8 	bne.w	80011ae <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2b40      	cmp	r3, #64	@ 0x40
 8000fe2:	d137      	bne.n	8001054 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d107      	bne.n	8001004 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e0db      	b.n	80011bc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800100c:	0e1b      	lsrs	r3, r3, #24
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d10a      	bne.n	800102c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800101e:	0a5b      	lsrs	r3, r3, #9
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b01      	cmp	r3, #1
 8001026:	d101      	bne.n	800102c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	4413      	add	r3, r2
 800103e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4413      	add	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	440b      	add	r3, r1
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
 8001052:	e036      	b.n	80010c2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	2b00      	cmp	r3, #0
 8001062:	d107      	bne.n	8001074 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001068:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0a3      	b.n	80011bc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800107c:	0e1b      	lsrs	r3, r3, #24
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b01      	cmp	r3, #1
 8001084:	d10a      	bne.n	800109c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001098:	2301      	movs	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	4413      	add	r3, r2
 80010ae:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	0c9b      	lsrs	r3, r3, #18
 80010dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e005      	b.n	80010f2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80010e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	3304      	adds	r3, #4
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b29a      	uxth	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0c1b      	lsrs	r3, r3, #16
 8001120:	f003 020f 	and.w	r2, r3, #15
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0e1b      	lsrs	r3, r3, #24
 8001146:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	0fda      	lsrs	r2, r3, #31
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	3304      	adds	r3, #4
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
 8001166:	e00a      	b.n	800117e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	441a      	add	r2, r3
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	440b      	add	r3, r1
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	3301      	adds	r3, #1
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	4a11      	ldr	r2, [pc, #68]	@ (80011c8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001184:	5cd3      	ldrb	r3, [r2, r3]
 8001186:	461a      	mov	r2, r3
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	4293      	cmp	r3, r2
 800118c:	d3ec      	bcc.n	8001168 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b40      	cmp	r3, #64	@ 0x40
 8001192:	d105      	bne.n	80011a0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800119e:	e004      	b.n	80011aa <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e006      	b.n	80011bc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	f043 0208 	orr.w	r2, r3, #8
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
  }
}
 80011bc:	4618      	mov	r0, r3
 80011be:	372c      	adds	r7, #44	@ 0x2c
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	08002b30 	.word	0x08002b30

080011cc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80011de:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d003      	beq.n	80011ee <HAL_FDCAN_ActivateNotification+0x22>
 80011e6:	7dfb      	ldrb	r3, [r7, #23]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	f040 80c8 	bne.w	800137e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d03b      	beq.n	8001282 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d031      	beq.n	8001282 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001224:	2b00      	cmp	r3, #0
 8001226:	d004      	beq.n	8001232 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	2b00      	cmp	r3, #0
 8001230:	d027      	beq.n	8001282 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d01d      	beq.n	8001282 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b00      	cmp	r3, #0
 8001258:	d013      	beq.n	8001282 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00c      	beq.n	8001292 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d107      	bne.n	8001292 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d13b      	bne.n	800131e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d131      	bne.n	800131e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d127      	bne.n	800131e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d11d      	bne.n	800131e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d113      	bne.n	800131e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00c      	beq.n	800132e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0202 	orr.w	r2, r2, #2
 800132c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001334:	2b00      	cmp	r3, #0
 8001336:	d009      	beq.n	800134c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	430a      	orrs	r2, r1
 8001348:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	430a      	orrs	r2, r1
 8001366:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	430a      	orrs	r2, r1
 8001378:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e006      	b.n	800138c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001382:	f043 0202 	orr.w	r2, r3, #2
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
  }
}
 800138c:	4618      	mov	r0, r3
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	@ 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013a6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013b4:	4013      	ands	r3, r2
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013cc:	4013      	ands	r3, r2
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013e4:	4013      	ands	r3, r2
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ee:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80013f2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013fa:	6a3a      	ldr	r2, [r7, #32]
 80013fc:	4013      	ands	r3, r2
 80013fe:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001406:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800140a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	4013      	ands	r3, r2
 8001416:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800141e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001426:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2240      	movs	r2, #64	@ 0x40
 8001442:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f916 	bl	8001676 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d019      	beq.n	8001488 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d014      	beq.n	8001488 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001466:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800147e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001480:	6939      	ldr	r1, [r7, #16]
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f8d8 	bl	8001638 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001494:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8a2 	bl	80015e2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800149e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80014ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7fe feb2 	bl	8000218 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80014c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f897 	bl	80015f8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00c      	beq.n	80014ee <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f890 	bl	800160e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d018      	beq.n	800152a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d013      	beq.n	800152a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800150a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2280      	movs	r2, #128	@ 0x80
 8001520:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001522:	68f9      	ldr	r1, [r7, #12]
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f87c 	bl	8001622 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00c      	beq.n	800154e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001546:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f880 	bl	800164e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00c      	beq.n	8001572 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800156a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f878 	bl	8001662 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00f      	beq.n	800159c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00a      	beq.n	800159c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800158e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001594:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80015aa:	69f9      	ldr	r1, [r7, #28]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f876 	bl	800169e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d009      	beq.n	80015cc <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a3a      	ldr	r2, [r7, #32]
 80015be:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f858 	bl	800168a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80015da:	bf00      	nop
 80015dc:	3730      	adds	r7, #48	@ 0x30
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80016bc:	4b30      	ldr	r3, [pc, #192]	@ (8001780 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80016be:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001784 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d103      	bne.n	80016d2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80016d0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001788 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d103      	bne.n	80016e4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80016e2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016f2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fa:	041a      	lsls	r2, r3, #16
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001718:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001720:	061a      	lsls	r2, r3, #24
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e005      	b.n	8001766 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3304      	adds	r3, #4
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	429a      	cmp	r2, r3
 8001770:	d3f3      	bcc.n	800175a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	4000a400 	.word	0x4000a400
 8001784:	40006800 	.word	0x40006800
 8001788:	40006c00 	.word	0x40006c00

0800178c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800179a:	e15a      	b.n	8001a52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2101      	movs	r1, #1
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 814c 	beq.w	8001a4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d005      	beq.n	80017cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d130      	bne.n	800182e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001802:	2201      	movs	r2, #1
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f003 0201 	and.w	r2, r3, #1
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b03      	cmp	r3, #3
 8001838:	d017      	beq.n	800186a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d123      	bne.n	80018be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	6939      	ldr	r1, [r7, #16]
 80018ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0203 	and.w	r2, r3, #3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80a6 	beq.w	8001a4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001900:	4b5b      	ldr	r3, [pc, #364]	@ (8001a70 <HAL_GPIO_Init+0x2e4>)
 8001902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001904:	4a5a      	ldr	r2, [pc, #360]	@ (8001a70 <HAL_GPIO_Init+0x2e4>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6613      	str	r3, [r2, #96]	@ 0x60
 800190c:	4b58      	ldr	r3, [pc, #352]	@ (8001a70 <HAL_GPIO_Init+0x2e4>)
 800190e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001918:	4a56      	ldr	r2, [pc, #344]	@ (8001a74 <HAL_GPIO_Init+0x2e8>)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	220f      	movs	r2, #15
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001942:	d01f      	beq.n	8001984 <HAL_GPIO_Init+0x1f8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a4c      	ldr	r2, [pc, #304]	@ (8001a78 <HAL_GPIO_Init+0x2ec>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d019      	beq.n	8001980 <HAL_GPIO_Init+0x1f4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a4b      	ldr	r2, [pc, #300]	@ (8001a7c <HAL_GPIO_Init+0x2f0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d013      	beq.n	800197c <HAL_GPIO_Init+0x1f0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a4a      	ldr	r2, [pc, #296]	@ (8001a80 <HAL_GPIO_Init+0x2f4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00d      	beq.n	8001978 <HAL_GPIO_Init+0x1ec>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a49      	ldr	r2, [pc, #292]	@ (8001a84 <HAL_GPIO_Init+0x2f8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d007      	beq.n	8001974 <HAL_GPIO_Init+0x1e8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a48      	ldr	r2, [pc, #288]	@ (8001a88 <HAL_GPIO_Init+0x2fc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_GPIO_Init+0x1e4>
 800196c:	2305      	movs	r3, #5
 800196e:	e00a      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 8001970:	2306      	movs	r3, #6
 8001972:	e008      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 8001974:	2304      	movs	r3, #4
 8001976:	e006      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 8001978:	2303      	movs	r3, #3
 800197a:	e004      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 800197c:	2302      	movs	r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 8001984:	2300      	movs	r3, #0
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	f002 0203 	and.w	r2, r2, #3
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	4093      	lsls	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001996:	4937      	ldr	r1, [pc, #220]	@ (8001a74 <HAL_GPIO_Init+0x2e8>)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019a4:	4b39      	ldr	r3, [pc, #228]	@ (8001a8c <HAL_GPIO_Init+0x300>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019c8:	4a30      	ldr	r2, [pc, #192]	@ (8001a8c <HAL_GPIO_Init+0x300>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ce:	4b2f      	ldr	r3, [pc, #188]	@ (8001a8c <HAL_GPIO_Init+0x300>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019f2:	4a26      	ldr	r2, [pc, #152]	@ (8001a8c <HAL_GPIO_Init+0x300>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019f8:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <HAL_GPIO_Init+0x300>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a8c <HAL_GPIO_Init+0x300>)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <HAL_GPIO_Init+0x300>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a46:	4a11      	ldr	r2, [pc, #68]	@ (8001a8c <HAL_GPIO_Init+0x300>)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f47f ae9d 	bne.w	800179c <HAL_GPIO_Init+0x10>
  }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	48000800 	.word	0x48000800
 8001a80:	48000c00 	.word	0x48000c00
 8001a84:	48001000 	.word	0x48001000
 8001a88:	48001400 	.word	0x48001400
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d141      	bne.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ace:	4b4b      	ldr	r3, [pc, #300]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ada:	d131      	bne.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001adc:	4b47      	ldr	r3, [pc, #284]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ae2:	4a46      	ldr	r2, [pc, #280]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ae8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aec:	4b43      	ldr	r3, [pc, #268]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001af4:	4a41      	ldr	r2, [pc, #260]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001afa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001afc:	4b40      	ldr	r3, [pc, #256]	@ (8001c00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2232      	movs	r2, #50	@ 0x32
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4a3f      	ldr	r2, [pc, #252]	@ (8001c04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	0c9b      	lsrs	r3, r3, #18
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b12:	e002      	b.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1a:	4b38      	ldr	r3, [pc, #224]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b26:	d102      	bne.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f2      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b2e:	4b33      	ldr	r3, [pc, #204]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b3a:	d158      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e057      	b.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b40:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b46:	4a2d      	ldr	r2, [pc, #180]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b50:	e04d      	b.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b58:	d141      	bne.n	8001bde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b66:	d131      	bne.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b68:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b78:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b80:	4a1e      	ldr	r2, [pc, #120]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2232      	movs	r2, #50	@ 0x32
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	4a1c      	ldr	r2, [pc, #112]	@ (8001c04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	0c9b      	lsrs	r3, r3, #18
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9e:	e002      	b.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bb2:	d102      	bne.n	8001bba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f2      	bne.n	8001ba0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc6:	d112      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e011      	b.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bdc:	e007      	b.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001be6:	4a05      	ldr	r2, [pc, #20]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	20000000 	.word	0x20000000
 8001c04:	431bde83 	.word	0x431bde83

08001c08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c16:	6093      	str	r3, [r2, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40007000 	.word	0x40007000

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e2fe      	b.n	8002238 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d075      	beq.n	8001d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c46:	4b97      	ldr	r3, [pc, #604]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c50:	4b94      	ldr	r3, [pc, #592]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3e>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_OscConfig+0x44>
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d10b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	4b8d      	ldr	r3, [pc, #564]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x108>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d157      	bne.n	8001d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e2d9      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x74>
 8001c8e:	4b85      	ldr	r3, [pc, #532]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a84      	ldr	r2, [pc, #528]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xb0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xb0>
 8001cc0:	4b78      	ldr	r3, [pc, #480]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a77      	ldr	r2, [pc, #476]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b75      	ldr	r3, [pc, #468]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a74      	ldr	r2, [pc, #464]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7fe fe94 	bl	8000a0c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7fe fe90 	bl	8000a0c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e29e      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xc0>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7fe fe80 	bl	8000a0c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe fe7c 	bl	8000a0c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e28a      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d22:	4b60      	ldr	r3, [pc, #384]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0xe8>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d075      	beq.n	8001e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3e:	4b59      	ldr	r3, [pc, #356]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d48:	4b56      	ldr	r3, [pc, #344]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_OscConfig+0x136>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d002      	beq.n	8001d64 <HAL_RCC_OscConfig+0x13c>
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d11f      	bne.n	8001da4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d64:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x154>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e25d      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b49      	ldr	r3, [pc, #292]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	4946      	ldr	r1, [pc, #280]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d90:	4b45      	ldr	r3, [pc, #276]	@ (8001ea8 <HAL_RCC_OscConfig+0x280>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fded 	bl	8000974 <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d043      	beq.n	8001e28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e249      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d023      	beq.n	8001df4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dac:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a3c      	ldr	r2, [pc, #240]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7fe fe28 	bl	8000a0c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7fe fe24 	bl	8000a0c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e232      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	4b31      	ldr	r3, [pc, #196]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	061b      	lsls	r3, r3, #24
 8001dec:	492d      	ldr	r1, [pc, #180]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
 8001df2:	e01a      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2a      	ldr	r2, [pc, #168]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001dfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7fe fe04 	bl	8000a0c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7fe fe00 	bl	8000a0c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e20e      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1e0>
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d041      	beq.n	8001eba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01c      	beq.n	8001e78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e44:	4a17      	ldr	r2, [pc, #92]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7fe fddd 	bl	8000a0c <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e56:	f7fe fdd9 	bl	8000a0c <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1e7      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ef      	beq.n	8001e56 <HAL_RCC_OscConfig+0x22e>
 8001e76:	e020      	b.n	8001eba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7fe fdc0 	bl	8000a0c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8e:	e00d      	b.n	8001eac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7fe fdbc 	bl	8000a0c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d906      	bls.n	8001eac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1ca      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eac:	4b8c      	ldr	r3, [pc, #560]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ea      	bne.n	8001e90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80a6 	beq.w	8002014 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ecc:	4b84      	ldr	r3, [pc, #528]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_OscConfig+0x2b4>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x2b6>
 8001edc:	2300      	movs	r3, #0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00d      	beq.n	8001efe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eee:	4b7c      	ldr	r3, [pc, #496]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efe:	4b79      	ldr	r3, [pc, #484]	@ (80020e4 <HAL_RCC_OscConfig+0x4bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f0a:	4b76      	ldr	r3, [pc, #472]	@ (80020e4 <HAL_RCC_OscConfig+0x4bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a75      	ldr	r2, [pc, #468]	@ (80020e4 <HAL_RCC_OscConfig+0x4bc>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7fe fd79 	bl	8000a0c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7fe fd75 	bl	8000a0c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e183      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f30:	4b6c      	ldr	r3, [pc, #432]	@ (80020e4 <HAL_RCC_OscConfig+0x4bc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d108      	bne.n	8001f56 <HAL_RCC_OscConfig+0x32e>
 8001f44:	4b66      	ldr	r3, [pc, #408]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4a:	4a65      	ldr	r2, [pc, #404]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f54:	e024      	b.n	8001fa0 <HAL_RCC_OscConfig+0x378>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d110      	bne.n	8001f80 <HAL_RCC_OscConfig+0x358>
 8001f5e:	4b60      	ldr	r3, [pc, #384]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f64:	4a5e      	ldr	r2, [pc, #376]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f74:	4a5a      	ldr	r2, [pc, #360]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f7e:	e00f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x378>
 8001f80:	4b57      	ldr	r3, [pc, #348]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f86:	4a56      	ldr	r2, [pc, #344]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f90:	4b53      	ldr	r3, [pc, #332]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f96:	4a52      	ldr	r2, [pc, #328]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d016      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7fe fd30 	bl	8000a0c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7fe fd2c 	bl	8000a0c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e138      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc6:	4b46      	ldr	r3, [pc, #280]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ed      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x388>
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd6:	f7fe fd19 	bl	8000a0c <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7fe fd15 	bl	8000a0c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e121      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ed      	bne.n	8001fde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b35      	ldr	r3, [pc, #212]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	4a34      	ldr	r2, [pc, #208]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d03c      	beq.n	800209a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01c      	beq.n	8002062 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002028:	4b2d      	ldr	r3, [pc, #180]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 800202a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800202e:	4a2c      	ldr	r2, [pc, #176]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7fe fce8 	bl	8000a0c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002040:	f7fe fce4 	bl	8000a0c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e0f2      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002052:	4b23      	ldr	r3, [pc, #140]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8002054:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCC_OscConfig+0x418>
 8002060:	e01b      	b.n	800209a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002062:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8002064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002068:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7fe fccb 	bl	8000a0c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800207a:	f7fe fcc7 	bl	8000a0c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0d5      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 800208e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ef      	bne.n	800207a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80c9 	beq.w	8002236 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a4:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b0c      	cmp	r3, #12
 80020ae:	f000 8083 	beq.w	80021b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d15e      	bne.n	8002178 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a08      	ldr	r2, [pc, #32]	@ (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 80020c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7fe fca1 	bl	8000a0c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020cc:	e00c      	b.n	80020e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ce:	f7fe fc9d 	bl	8000a0c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d905      	bls.n	80020e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e0ab      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e8:	4b55      	ldr	r3, [pc, #340]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ec      	bne.n	80020ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f4:	4b52      	ldr	r3, [pc, #328]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	4b52      	ldr	r3, [pc, #328]	@ (8002244 <HAL_RCC_OscConfig+0x61c>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6a11      	ldr	r1, [r2, #32]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002104:	3a01      	subs	r2, #1
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	4311      	orrs	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800210e:	0212      	lsls	r2, r2, #8
 8002110:	4311      	orrs	r1, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002116:	0852      	lsrs	r2, r2, #1
 8002118:	3a01      	subs	r2, #1
 800211a:	0552      	lsls	r2, r2, #21
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002122:	0852      	lsrs	r2, r2, #1
 8002124:	3a01      	subs	r2, #1
 8002126:	0652      	lsls	r2, r2, #25
 8002128:	4311      	orrs	r1, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800212e:	06d2      	lsls	r2, r2, #27
 8002130:	430a      	orrs	r2, r1
 8002132:	4943      	ldr	r1, [pc, #268]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 8002134:	4313      	orrs	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002138:	4b41      	ldr	r3, [pc, #260]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a40      	ldr	r2, [pc, #256]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002144:	4b3e      	ldr	r3, [pc, #248]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a3d      	ldr	r2, [pc, #244]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800214e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe fc5c 	bl	8000a0c <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fc58 	bl	8000a0c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e066      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b35      	ldr	r3, [pc, #212]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x530>
 8002176:	e05e      	b.n	8002236 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a30      	ldr	r2, [pc, #192]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 800217e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe fc42 	bl	8000a0c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe fc3e 	bl	8000a0c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e04c      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219e:	4b28      	ldr	r3, [pc, #160]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021aa:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	4924      	ldr	r1, [pc, #144]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 80021b0:	4b25      	ldr	r3, [pc, #148]	@ (8002248 <HAL_RCC_OscConfig+0x620>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	60cb      	str	r3, [r1, #12]
 80021b6:	e03e      	b.n	8002236 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e039      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <HAL_RCC_OscConfig+0x618>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0203 	and.w	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d12c      	bne.n	8002232 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	3b01      	subs	r3, #1
 80021e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d123      	bne.n	8002232 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d11b      	bne.n	8002232 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d113      	bne.n	8002232 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	3b01      	subs	r3, #1
 8002218:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d109      	bne.n	8002232 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	3b01      	subs	r3, #1
 800222c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	019f800c 	.word	0x019f800c
 8002248:	feeefffc 	.word	0xfeeefffc

0800224c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e11e      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002264:	4b91      	ldr	r3, [pc, #580]	@ (80024ac <HAL_RCC_ClockConfig+0x260>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d910      	bls.n	8002294 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b8e      	ldr	r3, [pc, #568]	@ (80024ac <HAL_RCC_ClockConfig+0x260>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 020f 	bic.w	r2, r3, #15
 800227a:	498c      	ldr	r1, [pc, #560]	@ (80024ac <HAL_RCC_ClockConfig+0x260>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b8a      	ldr	r3, [pc, #552]	@ (80024ac <HAL_RCC_ClockConfig+0x260>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e106      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d073      	beq.n	8002388 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d129      	bne.n	80022fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a8:	4b81      	ldr	r3, [pc, #516]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0f4      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022b8:	f000 f966 	bl	8002588 <RCC_GetSysClockFreqFromPLLSource>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4a7c      	ldr	r2, [pc, #496]	@ (80024b4 <HAL_RCC_ClockConfig+0x268>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d93f      	bls.n	8002346 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022c6:	4b7a      	ldr	r3, [pc, #488]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d033      	beq.n	8002346 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d12f      	bne.n	8002346 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022e6:	4b72      	ldr	r3, [pc, #456]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022ee:	4a70      	ldr	r2, [pc, #448]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80022f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e024      	b.n	8002346 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d107      	bne.n	8002314 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002304:	4b6a      	ldr	r3, [pc, #424]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0c6      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002314:	4b66      	ldr	r3, [pc, #408]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0be      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002324:	f000 f8ce 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002328:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4a61      	ldr	r2, [pc, #388]	@ (80024b4 <HAL_RCC_ClockConfig+0x268>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d909      	bls.n	8002346 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002332:	4b5f      	ldr	r3, [pc, #380]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800233a:	4a5d      	ldr	r2, [pc, #372]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 800233c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002340:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002346:	4b5a      	ldr	r3, [pc, #360]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f023 0203 	bic.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4957      	ldr	r1, [pc, #348]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002354:	4313      	orrs	r3, r2
 8002356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002358:	f7fe fb58 	bl	8000a0c <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7fe fb54 	bl	8000a0c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e095      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	4b4e      	ldr	r3, [pc, #312]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 020c 	and.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	429a      	cmp	r2, r3
 8002386:	d1eb      	bne.n	8002360 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a0:	4b43      	ldr	r3, [pc, #268]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a42      	ldr	r2, [pc, #264]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023b8:	4b3d      	ldr	r3, [pc, #244]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80023c0:	4a3b      	ldr	r2, [pc, #236]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c8:	4b39      	ldr	r3, [pc, #228]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4936      	ldr	r1, [pc, #216]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
 80023da:	e008      	b.n	80023ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b80      	cmp	r3, #128	@ 0x80
 80023e0:	d105      	bne.n	80023ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023e2:	4b33      	ldr	r3, [pc, #204]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	4a32      	ldr	r2, [pc, #200]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ee:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <HAL_RCC_ClockConfig+0x260>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d21d      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fc:	4b2b      	ldr	r3, [pc, #172]	@ (80024ac <HAL_RCC_ClockConfig+0x260>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 020f 	bic.w	r2, r3, #15
 8002404:	4929      	ldr	r1, [pc, #164]	@ (80024ac <HAL_RCC_ClockConfig+0x260>)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800240c:	f7fe fafe 	bl	8000a0c <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7fe fafa 	bl	8000a0c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e03b      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <HAL_RCC_ClockConfig+0x260>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d1ed      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4917      	ldr	r1, [pc, #92]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490f      	ldr	r1, [pc, #60]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002476:	f000 f825 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800247a:	4602      	mov	r2, r0
 800247c:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <HAL_RCC_ClockConfig+0x264>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	490c      	ldr	r1, [pc, #48]	@ (80024b8 <HAL_RCC_ClockConfig+0x26c>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <HAL_RCC_ClockConfig+0x270>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <HAL_RCC_ClockConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fa6a 	bl	8000974 <HAL_InitTick>
 80024a0:	4603      	mov	r3, r0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40022000 	.word	0x40022000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	04c4b400 	.word	0x04c4b400
 80024b8:	08002b20 	.word	0x08002b20
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024ca:	4b2c      	ldr	r3, [pc, #176]	@ (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d102      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002580 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	e047      	b.n	800256c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024dc:	4b27      	ldr	r3, [pc, #156]	@ (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e8:	4b26      	ldr	r3, [pc, #152]	@ (8002584 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	e03e      	b.n	800256c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024ee:	4b23      	ldr	r3, [pc, #140]	@ (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b0c      	cmp	r3, #12
 80024f8:	d136      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3301      	adds	r3, #1
 8002510:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d10c      	bne.n	8002532 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002518:	4a1a      	ldr	r2, [pc, #104]	@ (8002584 <HAL_RCC_GetSysClockFreq+0xc0>)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	4a16      	ldr	r2, [pc, #88]	@ (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002522:	68d2      	ldr	r2, [r2, #12]
 8002524:	0a12      	lsrs	r2, r2, #8
 8002526:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	617b      	str	r3, [r7, #20]
      break;
 8002530:	e00c      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002532:	4a13      	ldr	r2, [pc, #76]	@ (8002580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4a10      	ldr	r2, [pc, #64]	@ (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 800253c:	68d2      	ldr	r2, [r2, #12]
 800253e:	0a12      	lsrs	r2, r2, #8
 8002540:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
      break;
 800254a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0e5b      	lsrs	r3, r3, #25
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	3301      	adds	r3, #1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	e001      	b.n	800256c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800256c:	693b      	ldr	r3, [r7, #16]
}
 800256e:	4618      	mov	r0, r3
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	00f42400 	.word	0x00f42400
 8002584:	007a1200 	.word	0x007a1200

08002588 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800258e:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d10c      	bne.n	80025c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ac:	4a17      	ldr	r2, [pc, #92]	@ (800260c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	4a14      	ldr	r2, [pc, #80]	@ (8002608 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025b6:	68d2      	ldr	r2, [r2, #12]
 80025b8:	0a12      	lsrs	r2, r2, #8
 80025ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	617b      	str	r3, [r7, #20]
    break;
 80025c4:	e00c      	b.n	80025e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025c6:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002608 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	0a12      	lsrs	r2, r2, #8
 80025d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
    break;
 80025de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e0:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0e5b      	lsrs	r3, r3, #25
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	3301      	adds	r3, #1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025fa:	687b      	ldr	r3, [r7, #4]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40021000 	.word	0x40021000
 800260c:	007a1200 	.word	0x007a1200
 8002610:	00f42400 	.word	0x00f42400

08002614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800261c:	2300      	movs	r3, #0
 800261e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002620:	2300      	movs	r3, #0
 8002622:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8098 	beq.w	8002762 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002636:	4b43      	ldr	r3, [pc, #268]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	4b40      	ldr	r3, [pc, #256]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002646:	4a3f      	ldr	r2, [pc, #252]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264c:	6593      	str	r3, [r2, #88]	@ 0x58
 800264e:	4b3d      	ldr	r3, [pc, #244]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265a:	2301      	movs	r3, #1
 800265c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800265e:	4b3a      	ldr	r3, [pc, #232]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a39      	ldr	r2, [pc, #228]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800266a:	f7fe f9cf 	bl	8000a0c <HAL_GetTick>
 800266e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002670:	e009      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fe f9cb 	bl	8000a0c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d902      	bls.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	74fb      	strb	r3, [r7, #19]
        break;
 8002684:	e005      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002686:	4b30      	ldr	r3, [pc, #192]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0ef      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d159      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002698:	4b2a      	ldr	r3, [pc, #168]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01e      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d019      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026b4:	4b23      	ldr	r3, [pc, #140]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c0:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026e0:	4a18      	ldr	r2, [pc, #96]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe f98b 	bl	8000a0c <HAL_GetTick>
 80026f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f8:	e00b      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe f987 	bl	8000a0c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d902      	bls.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	74fb      	strb	r3, [r7, #19]
            break;
 8002710:	e006      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002712:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ec      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10b      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002726:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002734:	4903      	ldr	r1, [pc, #12]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800273c:	e008      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800273e:	7cfb      	ldrb	r3, [r7, #19]
 8002740:	74bb      	strb	r3, [r7, #18]
 8002742:	e005      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002750:	7c7b      	ldrb	r3, [r7, #17]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d105      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	4ba7      	ldr	r3, [pc, #668]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	4aa6      	ldr	r2, [pc, #664]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002760:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800276e:	4ba1      	ldr	r3, [pc, #644]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002774:	f023 0203 	bic.w	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	499d      	ldr	r1, [pc, #628]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002790:	4b98      	ldr	r3, [pc, #608]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002796:	f023 020c 	bic.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4995      	ldr	r1, [pc, #596]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027b2:	4b90      	ldr	r3, [pc, #576]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	498c      	ldr	r1, [pc, #560]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027d4:	4b87      	ldr	r3, [pc, #540]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	4984      	ldr	r1, [pc, #528]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027f6:	4b7f      	ldr	r3, [pc, #508]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	497b      	ldr	r1, [pc, #492]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002818:	4b76      	ldr	r3, [pc, #472]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	4973      	ldr	r1, [pc, #460]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800283a:	4b6e      	ldr	r3, [pc, #440]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002840:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	496a      	ldr	r1, [pc, #424]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800285c:	4b65      	ldr	r3, [pc, #404]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4962      	ldr	r1, [pc, #392]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800287e:	4b5d      	ldr	r3, [pc, #372]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002884:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	4959      	ldr	r1, [pc, #356]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028a0:	4b54      	ldr	r3, [pc, #336]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	4951      	ldr	r1, [pc, #324]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028c2:	4b4c      	ldr	r3, [pc, #304]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	4948      	ldr	r1, [pc, #288]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e4:	4b43      	ldr	r3, [pc, #268]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	4940      	ldr	r1, [pc, #256]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002902:	d105      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002904:	4b3b      	ldr	r3, [pc, #236]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a3a      	ldr	r2, [pc, #232]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800290e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800291c:	4b35      	ldr	r3, [pc, #212]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002922:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292a:	4932      	ldr	r1, [pc, #200]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002936:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800293a:	d105      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800293c:	4b2d      	ldr	r3, [pc, #180]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a2c      	ldr	r2, [pc, #176]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002942:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002946:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d015      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002954:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002962:	4924      	ldr	r1, [pc, #144]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002972:	d105      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002974:	4b1f      	ldr	r3, [pc, #124]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a1e      	ldr	r2, [pc, #120]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800297e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800298c:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002992:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299a:	4916      	ldr	r1, [pc, #88]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029aa:	d105      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ac:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a10      	ldr	r2, [pc, #64]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d019      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	4908      	ldr	r1, [pc, #32]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029e2:	d109      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e4:	4b03      	ldr	r3, [pc, #12]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a02      	ldr	r2, [pc, #8]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ee:	60d3      	str	r3, [r2, #12]
 80029f0:	e002      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d015      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a04:	4b29      	ldr	r3, [pc, #164]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	4926      	ldr	r1, [pc, #152]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a22:	d105      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a24:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a20      	ldr	r2, [pc, #128]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a42:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a4a:	4918      	ldr	r1, [pc, #96]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a5c:	4b13      	ldr	r3, [pc, #76]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a12      	ldr	r2, [pc, #72]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a66:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d015      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a74:	4b0d      	ldr	r3, [pc, #52]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a82:	490a      	ldr	r1, [pc, #40]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a04      	ldr	r2, [pc, #16]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002aa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000

08002ab0 <memset>:
 8002ab0:	4402      	add	r2, r0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	f803 1b01 	strb.w	r1, [r3], #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <__libc_init_array>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8002af8 <__libc_init_array+0x38>)
 8002ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8002afc <__libc_init_array+0x3c>)
 8002ac6:	1b64      	subs	r4, r4, r5
 8002ac8:	10a4      	asrs	r4, r4, #2
 8002aca:	2600      	movs	r6, #0
 8002acc:	42a6      	cmp	r6, r4
 8002ace:	d109      	bne.n	8002ae4 <__libc_init_array+0x24>
 8002ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8002b00 <__libc_init_array+0x40>)
 8002ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8002b04 <__libc_init_array+0x44>)
 8002ad4:	f000 f818 	bl	8002b08 <_init>
 8002ad8:	1b64      	subs	r4, r4, r5
 8002ada:	10a4      	asrs	r4, r4, #2
 8002adc:	2600      	movs	r6, #0
 8002ade:	42a6      	cmp	r6, r4
 8002ae0:	d105      	bne.n	8002aee <__libc_init_array+0x2e>
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae8:	4798      	blx	r3
 8002aea:	3601      	adds	r6, #1
 8002aec:	e7ee      	b.n	8002acc <__libc_init_array+0xc>
 8002aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af2:	4798      	blx	r3
 8002af4:	3601      	adds	r6, #1
 8002af6:	e7f2      	b.n	8002ade <__libc_init_array+0x1e>
 8002af8:	08002b40 	.word	0x08002b40
 8002afc:	08002b40 	.word	0x08002b40
 8002b00:	08002b40 	.word	0x08002b40
 8002b04:	08002b44 	.word	0x08002b44

08002b08 <_init>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	bf00      	nop
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr

08002b14 <_fini>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	bf00      	nop
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr
