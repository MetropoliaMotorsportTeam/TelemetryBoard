
TelemetryBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005be4  08005be4  00006be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c34  08005c34  0000702c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c34  08005c34  00006c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c3c  08005c3c  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c3c  08005c3c  00006c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c40  08005c40  00006c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08005c44  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e54  2000002c  08005c70  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e80  08005c70  00007e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c72  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002646  00000000  00000000  00019cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b25  00000000  00000000  0001d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025daa  00000000  00000000  0001dcb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115a5  00000000  00000000  00043a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f238f  00000000  00000000  00055004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c28  00000000  00000000  001473d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0014b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005bcc 	.word	0x08005bcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	08005bcc 	.word	0x08005bcc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <HAL_FDCAN_RxFifo0Callback>:
CAN_Message MessageBuffer[256];
uint8_t MessageBufferIndex = 0;


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	2b00      	cmp	r3, #0
 8000556:	d069      	beq.n	800062c <HAL_FDCAN_RxFifo0Callback+0xe8>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK)
 8000558:	4b36      	ldr	r3, [pc, #216]	@ (8000634 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 800055a:	4a37      	ldr	r2, [pc, #220]	@ (8000638 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 800055c:	2140      	movs	r1, #64	@ 0x40
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f001 f998 	bl	8001894 <HAL_FDCAN_GetRxMessage>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d002      	beq.n	8000570 <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
    /* Reception Error */
    Error_Handler();
 800056a:	f000 fabb 	bl	8000ae4 <Error_Handler>
 800056e:	e053      	b.n	8000618 <HAL_FDCAN_RxFifo0Callback+0xd4>
    }
    else{

            MessageBuffer[MessageBufferIndex].Id = RxHeader.Identifier;
 8000570:	4b31      	ldr	r3, [pc, #196]	@ (8000638 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b31      	ldr	r3, [pc, #196]	@ (800063c <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	b290      	uxth	r0, r2
 800057c:	4a30      	ldr	r2, [pc, #192]	@ (8000640 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 800057e:	460b      	mov	r3, r1
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	440b      	add	r3, r1
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4413      	add	r3, r2
 8000588:	4602      	mov	r2, r0
 800058a:	801a      	strh	r2, [r3, #0]
            MessageBuffer[MessageBufferIndex].DLC = RxHeader.DataLength;
 800058c:	4b2a      	ldr	r3, [pc, #168]	@ (8000638 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 800058e:	68da      	ldr	r2, [r3, #12]
 8000590:	4b2a      	ldr	r3, [pc, #168]	@ (800063c <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	b2d0      	uxtb	r0, r2
 8000598:	4a29      	ldr	r2, [pc, #164]	@ (8000640 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 800059a:	460b      	mov	r3, r1
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	440b      	add	r3, r1
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	3302      	adds	r3, #2
 80005a6:	4602      	mov	r2, r0
 80005a8:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < RxHeader.DataLength; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	e014      	b.n	80005da <HAL_FDCAN_RxFifo0Callback+0x96>
            {
                MessageBuffer[MessageBufferIndex].Bytes[i] = CAN_RxData[i];
 80005b0:	4b22      	ldr	r3, [pc, #136]	@ (800063c <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000634 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	7818      	ldrb	r0, [r3, #0]
 80005be:	4a20      	ldr	r2, [pc, #128]	@ (8000640 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 80005c0:	460b      	mov	r3, r1
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	440b      	add	r3, r1
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	441a      	add	r2, r3
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	4413      	add	r3, r2
 80005ce:	3303      	adds	r3, #3
 80005d0:	4602      	mov	r2, r0
 80005d2:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < RxHeader.DataLength; i++)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 80005dc:	68da      	ldr	r2, [r3, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8e5      	bhi.n	80005b0 <HAL_FDCAN_RxFifo0Callback+0x6c>
            }
            MessageBuffer[MessageBufferIndex].CanNbr = (hfdcan->Instance == FDCAN2) ? 1 : 2;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a16      	ldr	r2, [pc, #88]	@ (8000644 <HAL_FDCAN_RxFifo0Callback+0x100>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d101      	bne.n	80005f2 <HAL_FDCAN_RxFifo0Callback+0xae>
 80005ee:	2001      	movs	r0, #1
 80005f0:	e000      	b.n	80005f4 <HAL_FDCAN_RxFifo0Callback+0xb0>
 80005f2:	2002      	movs	r0, #2
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	4a11      	ldr	r2, [pc, #68]	@ (8000640 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 80005fc:	460b      	mov	r3, r1
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	440b      	add	r3, r1
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	330b      	adds	r3, #11
 8000608:	4602      	mov	r2, r0
 800060a:	701a      	strb	r2, [r3, #0]
            MessageBufferIndex++;
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <HAL_FDCAN_RxFifo0Callback+0xf8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000616:	701a      	strb	r2, [r3, #0]
   
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000618:	2200      	movs	r2, #0
 800061a:	2101      	movs	r1, #1
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f001 fa41 	bl	8001aa4 <HAL_FDCAN_ActivateNotification>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <HAL_FDCAN_RxFifo0Callback+0xe8>
    {
      /* Notification Error */
      Error_Handler();
 8000628:	f000 fa5c 	bl	8000ae4 <Error_Handler>
    }
  }
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000048 	.word	0x20000048
 8000638:	20000e38 	.word	0x20000e38
 800063c:	20000c50 	.word	0x20000c50
 8000640:	20000050 	.word	0x20000050
 8000644:	40006800 	.word	0x40006800

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fd25 	bl	800109a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f816 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f9d6 	bl	8000a04 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000658:	f000 f852 	bl	8000700 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 800065c:	f000 f8da 	bl	8000814 <MX_FDCAN3_Init>
  MX_SPI1_Init();
 8000660:	f000 f944 	bl	80008ec <MX_SPI1_Init>
  MX_UART5_Init();
 8000664:	f000 f980 	bl	8000968 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart5, uart_rx, sizeof(uart_rx));
 8000668:	2210      	movs	r2, #16
 800066a:	4903      	ldr	r1, [pc, #12]	@ (8000678 <main+0x30>)
 800066c:	4803      	ldr	r0, [pc, #12]	@ (800067c <main+0x34>)
 800066e:	f005 f9d2 	bl	8005a16 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //CheckInternet();
	  Enter_AT();
 8000672:	f000 fc73 	bl	8000f5c <Enter_AT>
 8000676:	e7fc      	b.n	8000672 <main+0x2a>
 8000678:	20000e6c 	.word	0x20000e6c
 800067c:	20000d80 	.word	0x20000d80

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2238      	movs	r2, #56	@ 0x38
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 fa70 	bl	8005b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a6:	f001 fe85 	bl	80023b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2340      	movs	r3, #64	@ 0x40
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 ff2b 	bl	800251c <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006cc:	f000 fa0a 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2301      	movs	r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fa29 	bl	8002b40 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006f4:	f000 f9f6 	bl	8000ae4 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	@ 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000704:	4b40      	ldr	r3, [pc, #256]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000706:	4a41      	ldr	r2, [pc, #260]	@ (800080c <MX_FDCAN2_Init+0x10c>)
 8000708:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800070a:	4b3f      	ldr	r3, [pc, #252]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000710:	4b3d      	ldr	r3, [pc, #244]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000716:	4b3c      	ldr	r3, [pc, #240]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 800071c:	4b3a      	ldr	r3, [pc, #232]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 800071e:	2201      	movs	r2, #1
 8000720:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000722:	4b39      	ldr	r3, [pc, #228]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000724:	2200      	movs	r2, #0
 8000726:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000728:	4b37      	ldr	r3, [pc, #220]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 800072a:	2200      	movs	r2, #0
 800072c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800072e:	4b36      	ldr	r3, [pc, #216]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000730:	2201      	movs	r2, #1
 8000732:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000734:	4b34      	ldr	r3, [pc, #208]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000736:	2201      	movs	r2, #1
 8000738:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 800073a:	4b33      	ldr	r3, [pc, #204]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 800073c:	220d      	movs	r2, #13
 800073e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000740:	4b31      	ldr	r3, [pc, #196]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000742:	2202      	movs	r2, #2
 8000744:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000746:	4b30      	ldr	r3, [pc, #192]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000748:	2201      	movs	r2, #1
 800074a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800074c:	4b2e      	ldr	r3, [pc, #184]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 800074e:	2201      	movs	r2, #1
 8000750:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000752:	4b2d      	ldr	r3, [pc, #180]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000754:	2201      	movs	r2, #1
 8000756:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000758:	4b2b      	ldr	r3, [pc, #172]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 800075a:	2201      	movs	r2, #1
 800075c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 28;
 800075e:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000760:	221c      	movs	r2, #28
 8000762:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000764:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000766:	2200      	movs	r2, #0
 8000768:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800076a:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 800076c:	2200      	movs	r2, #0
 800076e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000770:	4825      	ldr	r0, [pc, #148]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000772:	f000 fed3 	bl	800151c <HAL_FDCAN_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800077c:	f000 f9b2 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan2, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8000780:	2201      	movs	r2, #1
 8000782:	2140      	movs	r1, #64	@ 0x40
 8000784:	4820      	ldr	r0, [pc, #128]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 8000786:	f001 f823 	bl	80017d0 <HAL_FDCAN_ConfigRxFifoOverwrite>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_FDCAN2_Init+0x94>
    {
      Error_Handler();
 8000790:	f000 f9a8 	bl	8000ae4 <Error_Handler>
    }
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan2, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8000794:	2201      	movs	r2, #1
 8000796:	2141      	movs	r1, #65	@ 0x41
 8000798:	481b      	ldr	r0, [pc, #108]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 800079a:	f001 f819 	bl	80017d0 <HAL_FDCAN_ConfigRxFifoOverwrite>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_FDCAN2_Init+0xa8>
    {
      Error_Handler();
 80007a4:	f000 f99e 	bl	8000ae4 <Error_Handler>
    }


  if(HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 80007a8:	4817      	ldr	r0, [pc, #92]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 80007aa:	f001 f84a 	bl	8001842 <HAL_FDCAN_Start>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_FDCAN2_Init+0xb8>
    {
      Error_Handler();
 80007b4:	f000 f996 	bl	8000ae4 <Error_Handler>
    }
  if(HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	4812      	ldr	r0, [pc, #72]	@ (8000808 <MX_FDCAN2_Init+0x108>)
 80007be:	f001 f971 	bl	8001aa4 <HAL_FDCAN_ActivateNotification>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_FDCAN2_Init+0xcc>
    {
      Error_Handler();
 80007c8:	f000 f98c 	bl	8000ae4 <Error_Handler>
    }

  TxHeader.Identifier = 0x123; // Modify this with your identifier
 80007cc:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <MX_FDCAN2_Init+0x110>)
 80007ce:	f240 1223 	movw	r2, #291	@ 0x123
 80007d2:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_FDCAN2_Init+0x110>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <MX_FDCAN2_Init+0x110>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_FDCAN2_Init+0x110>)
 80007e2:	2208      	movs	r2, #8
 80007e4:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_FDCAN2_Init+0x110>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_FDCAN2_Init+0x110>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80007f2:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_FDCAN2_Init+0x110>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <MX_FDCAN2_Init+0x110>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80007fe:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <MX_FDCAN2_Init+0x110>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000c54 	.word	0x20000c54
 800080c:	40006800 	.word	0x40006800
 8000810:	20000e14 	.word	0x20000e14

08000814 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000818:	4b32      	ldr	r3, [pc, #200]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 800081a:	4a33      	ldr	r2, [pc, #204]	@ (80008e8 <MX_FDCAN3_Init+0xd4>)
 800081c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000824:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800082a:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 8000830:	4b2c      	ldr	r3, [pc, #176]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000832:	2201      	movs	r2, #1
 8000834:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000836:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000838:	2200      	movs	r2, #0
 800083a:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 800083e:	2200      	movs	r2, #0
 8000840:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000844:	2201      	movs	r2, #1
 8000846:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 800084a:	2201      	movs	r2, #1
 800084c:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 13;
 800084e:	4b25      	ldr	r3, [pc, #148]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000850:	220d      	movs	r2, #13
 8000852:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000854:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000856:	2202      	movs	r2, #2
 8000858:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800085a:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 800085c:	2201      	movs	r2, #1
 800085e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000860:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000862:	2201      	movs	r2, #1
 8000864:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000866:	4b1f      	ldr	r3, [pc, #124]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000868:	2201      	movs	r2, #1
 800086a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 800086e:	2201      	movs	r2, #1
 8000870:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 28;
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000874:	221c      	movs	r2, #28
 8000876:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 800087a:	2200      	movs	r2, #0
 800087c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000884:	4817      	ldr	r0, [pc, #92]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 8000886:	f000 fe49 	bl	800151c <HAL_FDCAN_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8000890:	f000 f928 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan3, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8000894:	2201      	movs	r2, #1
 8000896:	2140      	movs	r1, #64	@ 0x40
 8000898:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 800089a:	f000 ff99 	bl	80017d0 <HAL_FDCAN_ConfigRxFifoOverwrite>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_FDCAN3_Init+0x94>
    {
      Error_Handler();
 80008a4:	f000 f91e 	bl	8000ae4 <Error_Handler>
    }
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan3, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 80008a8:	2201      	movs	r2, #1
 80008aa:	2141      	movs	r1, #65	@ 0x41
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 80008ae:	f000 ff8f 	bl	80017d0 <HAL_FDCAN_ConfigRxFifoOverwrite>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_FDCAN3_Init+0xa8>
    {
      Error_Handler();
 80008b8:	f000 f914 	bl	8000ae4 <Error_Handler>
    }


  if(HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80008bc:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 80008be:	f000 ffc0 	bl	8001842 <HAL_FDCAN_Start>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_FDCAN3_Init+0xb8>
    {
      Error_Handler();
 80008c8:	f000 f90c 	bl	8000ae4 <Error_Handler>
    }
  if(HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80008cc:	2200      	movs	r2, #0
 80008ce:	2101      	movs	r1, #1
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_FDCAN3_Init+0xd0>)
 80008d2:	f001 f8e7 	bl	8001aa4 <HAL_FDCAN_ActivateNotification>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_FDCAN3_Init+0xcc>
    {
      Error_Handler();
 80008dc:	f000 f902 	bl	8000ae4 <Error_Handler>
    }
  /* USER CODE END FDCAN3_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000cb8 	.word	0x20000cb8
 80008e8:	40006c00 	.word	0x40006c00

080008ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_SPI1_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000964 <MX_SPI1_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_SPI1_Init+0x74>)
 80008f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_SPI1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_SPI1_Init+0x74>)
 8000906:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800090a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_SPI1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_SPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_SPI1_Init+0x74>)
 800091a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800091e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_SPI1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_SPI1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_SPI1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_SPI1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_SPI1_Init+0x74>)
 800093a:	2207      	movs	r2, #7
 800093c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <MX_SPI1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_SPI1_Init+0x74>)
 8000946:	2208      	movs	r2, #8
 8000948:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_SPI1_Init+0x74>)
 800094c:	f002 fd62 	bl	8003414 <HAL_SPI_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 f8c5 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000d1c 	.word	0x20000d1c
 8000964:	40013000 	.word	0x40013000

08000968 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800096c:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <MX_UART5_Init+0x94>)
 800096e:	4a24      	ldr	r2, [pc, #144]	@ (8000a00 <MX_UART5_Init+0x98>)
 8000970:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <MX_UART5_Init+0x94>)
 8000974:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000978:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b20      	ldr	r3, [pc, #128]	@ (80009fc <MX_UART5_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <MX_UART5_Init+0x94>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000986:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <MX_UART5_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <MX_UART5_Init+0x94>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000992:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_UART5_Init+0x94>)
 8000994:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000998:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <MX_UART5_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MX_UART5_Init+0x94>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <MX_UART5_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_UART5_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009b2:	4812      	ldr	r0, [pc, #72]	@ (80009fc <MX_UART5_Init+0x94>)
 80009b4:	f002 fdd9 	bl	800356a <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 80009be:	f000 f891 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	480d      	ldr	r0, [pc, #52]	@ (80009fc <MX_UART5_Init+0x94>)
 80009c6:	f004 ffaa 	bl	800591e <HAL_UARTEx_SetTxFifoThreshold>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 80009d0:	f000 f888 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4809      	ldr	r0, [pc, #36]	@ (80009fc <MX_UART5_Init+0x94>)
 80009d8:	f004 ffdf 	bl	800599a <HAL_UARTEx_SetRxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 80009e2:	f000 f87f 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_UART5_Init+0x94>)
 80009e8:	f004 ff60 	bl	80058ac <HAL_UARTEx_DisableFifoMode>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 80009f2:	f000 f877 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000d80 	.word	0x20000d80
 8000a00:	40005000 	.word	0x40005000

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4a28      	ldr	r2, [pc, #160]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a22      	ldr	r2, [pc, #136]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a80:	4816      	ldr	r0, [pc, #88]	@ (8000adc <MX_GPIO_Init+0xd8>)
 8000a82:	f001 fc7f 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000a8c:	4814      	ldr	r0, [pc, #80]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000a8e:	f001 fc79 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480c      	ldr	r0, [pc, #48]	@ (8000adc <MX_GPIO_Init+0xd8>)
 8000aac:	f001 fae8 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000ab0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000aca:	f001 fad9 	bl	8002080 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	@ 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <HAL_MspInit+0x44>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000afa:	4a0e      	ldr	r2, [pc, #56]	@ (8000b34 <HAL_MspInit+0x44>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b26:	f001 fce9 	bl	80024fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0a0      	sub	sp, #128	@ 0x80
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	2254      	movs	r2, #84	@ 0x54
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f005 f80b 	bl	8005b74 <memset>
  if(hfdcan->Instance==FDCAN2)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a51      	ldr	r2, [pc, #324]	@ (8000ca8 <HAL_FDCAN_MspInit+0x170>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d14a      	bne.n	8000bfe <HAL_FDCAN_MspInit+0xc6>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b72:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 f9fd 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000b84:	f7ff ffae 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b88:	4b48      	ldr	r3, [pc, #288]	@ (8000cac <HAL_FDCAN_MspInit+0x174>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a47      	ldr	r2, [pc, #284]	@ (8000cac <HAL_FDCAN_MspInit+0x174>)
 8000b90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b92:	4b46      	ldr	r3, [pc, #280]	@ (8000cac <HAL_FDCAN_MspInit+0x174>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d10b      	bne.n	8000bb2 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b9a:	4b45      	ldr	r3, [pc, #276]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9e:	4a44      	ldr	r2, [pc, #272]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000ba0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba6:	4b42      	ldr	r3, [pc, #264]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000bca:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000bdc:	2309      	movs	r3, #9
 8000bde:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000be4:	4619      	mov	r1, r3
 8000be6:	4833      	ldr	r0, [pc, #204]	@ (8000cb4 <HAL_FDCAN_MspInit+0x17c>)
 8000be8:	f001 fa4a 	bl	8002080 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2056      	movs	r0, #86	@ 0x56
 8000bf2:	f000 fb9e 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000bf6:	2056      	movs	r0, #86	@ 0x56
 8000bf8:	f000 fbb5 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000bfc:	e04f      	b.n	8000c9e <HAL_FDCAN_MspInit+0x166>
  else if(hfdcan->Instance==FDCAN3)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a2d      	ldr	r2, [pc, #180]	@ (8000cb8 <HAL_FDCAN_MspInit+0x180>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d14a      	bne.n	8000c9e <HAL_FDCAN_MspInit+0x166>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c12:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 f9ad 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_FDCAN_MspInit+0xf0>
      Error_Handler();
 8000c24:	f7ff ff5e 	bl	8000ae4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c28:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <HAL_FDCAN_MspInit+0x174>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cac <HAL_FDCAN_MspInit+0x174>)
 8000c30:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000c32:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <HAL_FDCAN_MspInit+0x174>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d10b      	bne.n	8000c52 <HAL_FDCAN_MspInit+0x11a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000c40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	4a16      	ldr	r2, [pc, #88]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <HAL_FDCAN_MspInit+0x178>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000c6a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000c6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000c7c:	230b      	movs	r3, #11
 8000c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8a:	f001 f9f9 	bl	8002080 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2058      	movs	r0, #88	@ 0x58
 8000c94:	f000 fb4d 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8000c98:	2058      	movs	r0, #88	@ 0x58
 8000c9a:	f000 fb64 	bl	8001366 <HAL_NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3780      	adds	r7, #128	@ 0x80
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40006800 	.word	0x40006800
 8000cac:	20000e60 	.word	0x20000e60
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	40006c00 	.word	0x40006c00

08000cbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a17      	ldr	r2, [pc, #92]	@ (8000d38 <HAL_SPI_MspInit+0x7c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d128      	bne.n	8000d30 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <HAL_SPI_MspInit+0x80>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce2:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <HAL_SPI_MspInit+0x80>)
 8000ce4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ce8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <HAL_SPI_MspInit+0x80>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <HAL_SPI_MspInit+0x80>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4a10      	ldr	r2, [pc, #64]	@ (8000d3c <HAL_SPI_MspInit+0x80>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_SPI_MspInit+0x80>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d0e:	23f0      	movs	r3, #240	@ 0xf0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2c:	f001 f9a8 	bl	8002080 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	@ 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0a0      	sub	sp, #128	@ 0x80
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	2254      	movs	r2, #84	@ 0x54
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 ff07 	bl	8005b74 <memset>
  if(huart->Instance==UART5)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a47      	ldr	r2, [pc, #284]	@ (8000e88 <HAL_UART_MspInit+0x148>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	f040 8087 	bne.w	8000e80 <HAL_UART_MspInit+0x140>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000d72:	2310      	movs	r3, #16
 8000d74:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7a:	f107 0318 	add.w	r3, r7, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 f8fa 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d8a:	f7ff feab 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d92:	4a3e      	ldr	r2, [pc, #248]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000d94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b39      	ldr	r3, [pc, #228]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	4a38      	ldr	r2, [pc, #224]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db2:	4b36      	ldr	r3, [pc, #216]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	4b33      	ldr	r3, [pc, #204]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	4a32      	ldr	r2, [pc, #200]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dca:	4b30      	ldr	r3, [pc, #192]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	4a2c      	ldr	r2, [pc, #176]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <HAL_UART_MspInit+0x14c>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    PB4     ------> UART5_RTS
    PB5     ------> UART5_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000e00:	2305      	movs	r3, #5
 8000e02:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e04:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4821      	ldr	r0, [pc, #132]	@ (8000e90 <HAL_UART_MspInit+0x150>)
 8000e0c:	f001 f938 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e10:	2304      	movs	r3, #4
 8000e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000e20:	2305      	movs	r3, #5
 8000e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481a      	ldr	r0, [pc, #104]	@ (8000e94 <HAL_UART_MspInit+0x154>)
 8000e2c:	f001 f928 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e30:	2310      	movs	r3, #16
 8000e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e40:	2308      	movs	r3, #8
 8000e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4813      	ldr	r0, [pc, #76]	@ (8000e98 <HAL_UART_MspInit+0x158>)
 8000e4c:	f001 f918 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e50:	2320      	movs	r3, #32
 8000e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000e60:	230e      	movs	r3, #14
 8000e62:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <HAL_UART_MspInit+0x158>)
 8000e6c:	f001 f908 	bl	8002080 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2035      	movs	r0, #53	@ 0x35
 8000e76:	f000 fa5c 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e7a:	2035      	movs	r0, #53	@ 0x35
 8000e7c:	f000 fa73 	bl	8001366 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8000e80:	bf00      	nop
 8000e82:	3780      	adds	r7, #128	@ 0x80
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40005000 	.word	0x40005000
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	48000800 	.word	0x48000800
 8000e94:	48000c00 	.word	0x48000c00
 8000e98:	48000400 	.word	0x48000400

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef2:	f000 f925 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <UART5_IRQHandler+0x10>)
 8000f02:	f002 fc17 	bl	8003734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000d80 	.word	0x20000d80

08000f10 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <FDCAN2_IT0_IRQHandler+0x10>)
 8000f16:	f000 feab 	bl	8001c70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000c54 	.word	0x20000c54

08000f24 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <FDCAN3_IT0_IRQHandler+0x10>)
 8000f2a:	f000 fea1 	bl	8001c70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000cb8 	.word	0x20000cb8

08000f38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Enter_AT>:
uint8_t AT_INI[] = {'F', 'F', 0x0D}; //Initializing

uint8_t uart_rx[16]; //UART receive Buffer

//Enters AT Mode on XBee
void Enter_AT(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart5, AT_ENTER_TEST, sizeof(AT_ENTER_TEST));
 8000f60:	2204      	movs	r2, #4
 8000f62:	490a      	ldr	r1, [pc, #40]	@ (8000f8c <Enter_AT+0x30>)
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <Enter_AT+0x34>)
 8000f66:	f002 fb51 	bl	800360c <HAL_UART_Transmit_IT>
	while (!FLAG.at_ok){
 8000f6a:	e000      	b.n	8000f6e <Enter_AT+0x12>
		__WFI();
 8000f6c:	bf30      	wfi
	while (!FLAG.at_ok){
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <Enter_AT+0x38>)
 8000f70:	799b      	ldrb	r3, [r3, #6]
 8000f72:	f083 0301 	eor.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f7      	bne.n	8000f6c <Enter_AT+0x10>
	}
	HAL_UART_Transmit_IT(&huart5, ATAN_SETUP, sizeof(ATAN_SETUP));
 8000f7c:	2211      	movs	r2, #17
 8000f7e:	4906      	ldr	r1, [pc, #24]	@ (8000f98 <Enter_AT+0x3c>)
 8000f80:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <Enter_AT+0x34>)
 8000f82:	f002 fb43 	bl	800360c <HAL_UART_Transmit_IT>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	20000d80 	.word	0x20000d80
 8000f94:	20000e64 	.word	0x20000e64
 8000f98:	2000000c 	.word	0x2000000c

08000f9c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, uart_rx, sizeof(uart_rx));
 8000fa8:	2210      	movs	r2, #16
 8000faa:	4922      	ldr	r1, [pc, #136]	@ (8001034 <HAL_UARTEx_RxEventCallback+0x98>)
 8000fac:	4822      	ldr	r0, [pc, #136]	@ (8001038 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000fae:	f004 fd32 	bl	8005a16 <HAL_UARTEx_ReceiveToIdle_IT>
		switch(Size)
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d006      	beq.n	8000fc6 <HAL_UARTEx_RxEventCallback+0x2a>
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	dc36      	bgt.n	800102a <HAL_UARTEx_RxEventCallback+0x8e>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d02b      	beq.n	8001018 <HAL_UARTEx_RxEventCallback+0x7c>
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d015      	beq.n	8000ff0 <HAL_UARTEx_RxEventCallback+0x54>
		case 1:
			FLAG.at_ok = false;
			memset(uart_rx, 0x00, sizeof(uart_rx));
			break;
		default:
			break;
 8000fc4:	e031      	b.n	800102a <HAL_UARTEx_RxEventCallback+0x8e>
			if(!memcmp(uart_rx, AT_OK, sizeof(AT_OK)))
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	491c      	ldr	r1, [pc, #112]	@ (800103c <HAL_UARTEx_RxEventCallback+0xa0>)
 8000fca:	481a      	ldr	r0, [pc, #104]	@ (8001034 <HAL_UARTEx_RxEventCallback+0x98>)
 8000fcc:	f004 fdc2 	bl	8005b54 <memcmp>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d103      	bne.n	8000fde <HAL_UARTEx_RxEventCallback+0x42>
				FLAG.at_ok = true;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	719a      	strb	r2, [r3, #6]
 8000fdc:	e002      	b.n	8000fe4 <HAL_UARTEx_RxEventCallback+0x48>
				FLAG.at_ok = false;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	719a      	strb	r2, [r3, #6]
			memset(uart_rx, 0x00, sizeof(uart_rx));
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4812      	ldr	r0, [pc, #72]	@ (8001034 <HAL_UARTEx_RxEventCallback+0x98>)
 8000fea:	f004 fdc3 	bl	8005b74 <memset>
			break;
 8000fee:	e01d      	b.n	800102c <HAL_UARTEx_RxEventCallback+0x90>
			if(!memcmp(uart_rx, AT_CONNECTED, sizeof(AT_CONNECTED)))
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4914      	ldr	r1, [pc, #80]	@ (8001044 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000ff4:	480f      	ldr	r0, [pc, #60]	@ (8001034 <HAL_UARTEx_RxEventCallback+0x98>)
 8000ff6:	f004 fdad 	bl	8005b54 <memcmp>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <HAL_UARTEx_RxEventCallback+0x6a>
				FLAG.connected_net = true;
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
			FLAG.at_ok = false;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	719a      	strb	r2, [r3, #6]
			memset(uart_rx, 0x00, sizeof(uart_rx));
 800100c:	2210      	movs	r2, #16
 800100e:	2100      	movs	r1, #0
 8001010:	4808      	ldr	r0, [pc, #32]	@ (8001034 <HAL_UARTEx_RxEventCallback+0x98>)
 8001012:	f004 fdaf 	bl	8005b74 <memset>
			break;
 8001016:	e009      	b.n	800102c <HAL_UARTEx_RxEventCallback+0x90>
			FLAG.at_ok = false;
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <HAL_UARTEx_RxEventCallback+0xa4>)
 800101a:	2200      	movs	r2, #0
 800101c:	719a      	strb	r2, [r3, #6]
			memset(uart_rx, 0x00, sizeof(uart_rx));
 800101e:	2210      	movs	r2, #16
 8001020:	2100      	movs	r1, #0
 8001022:	4804      	ldr	r0, [pc, #16]	@ (8001034 <HAL_UARTEx_RxEventCallback+0x98>)
 8001024:	f004 fda6 	bl	8005b74 <memset>
			break;
 8001028:	e000      	b.n	800102c <HAL_UARTEx_RxEventCallback+0x90>
			break;
 800102a:	bf00      	nop
		}
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000e6c 	.word	0x20000e6c
 8001038:	20000d80 	.word	0x20000d80
 800103c:	20000008 	.word	0x20000008
 8001040:	20000e64 	.word	0x20000e64
 8001044:	20000020 	.word	0x20000020

08001048 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001048:	480d      	ldr	r0, [pc, #52]	@ (8001080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800104c:	f7ff ff74 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <LoopForever+0x6>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	@ (8001088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <LoopForever+0xe>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	@ (8001094 <LoopForever+0x16>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f004 fd85 	bl	8005b84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800107a:	f7ff fae5 	bl	8000648 <main>

0800107e <LoopForever>:

LoopForever:
    b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   r0, =_estack
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800108c:	08005c44 	.word	0x08005c44
  ldr r2, =_sbss
 8001090:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001094:	20000e80 	.word	0x20000e80

08001098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_2_IRQHandler>

0800109a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f939 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	200f      	movs	r0, #15
 80010ac:	f000 f80e 	bl	80010cc <HAL_InitTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	e001      	b.n	80010c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010bc:	f7ff fd18 	bl	8000af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c0:	79fb      	ldrb	r3, [r7, #7]

}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <HAL_InitTick+0x68>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d022      	beq.n	8001126 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <HAL_InitTick+0x6c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <HAL_InitTick+0x68>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80010f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f944 	bl	8001382 <HAL_SYSTICK_Config>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10f      	bne.n	8001120 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d809      	bhi.n	800111a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001106:	2200      	movs	r2, #0
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	f04f 30ff 	mov.w	r0, #4294967295
 800110e:	f000 f910 	bl	8001332 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_InitTick+0x70>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	e007      	b.n	800112a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	e004      	b.n	800112a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e001      	b.n	800112a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000028 	.word	0x20000028
 8001138:	20000000 	.word	0x20000000
 800113c:	20000024 	.word	0x20000024

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_IncTick+0x1c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_IncTick+0x20>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4413      	add	r3, r2
 800114e:	4a03      	ldr	r2, [pc, #12]	@ (800115c <HAL_IncTick+0x1c>)
 8001150:	6013      	str	r3, [r2, #0]
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000e7c 	.word	0x20000e7c
 8001160:	20000028 	.word	0x20000028

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000e7c 	.word	0x20000e7c

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	@ (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	@ (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	@ (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	@ 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff40 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff90 	bl	8001270 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5f 	bl	800121c <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff33 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffa4 	bl	80012d8 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800139a:	b480      	push	{r7}
 800139c:	b085      	sub	sp, #20
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d005      	beq.n	80013be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2204      	movs	r2, #4
 80013b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e037      	b.n	800142e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 020e 	bic.w	r2, r2, #14
 80013cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f003 021f 	and.w	r2, r3, #31
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	2101      	movs	r1, #1
 80013fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001400:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800140a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00c      	beq.n	800142e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800141e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001422:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800142c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d00d      	beq.n	8001480 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2204      	movs	r2, #4
 8001468:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e047      	b.n	8001510 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 020e 	bic.w	r2, r2, #14
 800148e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f202 	lsl.w	r2, r1, r2
 80014c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	4798      	blx	r3
    }
  }
  return status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e147      	b.n	80017be <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff faf8 	bl	8000b38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0210 	bic.w	r2, r2, #16
 8001556:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001558:	f7ff fe04 	bl	8001164 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800155e:	e012      	b.n	8001586 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001560:	f7ff fe00 	bl	8001164 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d90b      	bls.n	8001586 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e11b      	b.n	80017be <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b08      	cmp	r3, #8
 8001592:	d0e5      	beq.n	8001560 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a4:	f7ff fdde 	bl	8001164 <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80015aa:	e012      	b.n	80015d2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80015ac:	f7ff fdda 	bl	8001164 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d90b      	bls.n	80015d2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2203      	movs	r2, #3
 80015ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0f5      	b.n	80017be <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0e5      	beq.n	80015ac <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0202 	orr.w	r2, r2, #2
 80015ee:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a74      	ldr	r2, [pc, #464]	@ (80017c8 <HAL_FDCAN_Init+0x2ac>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d103      	bne.n	8001602 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80015fa:	4a74      	ldr	r2, [pc, #464]	@ (80017cc <HAL_FDCAN_Init+0x2b0>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7c1b      	ldrb	r3, [r3, #16]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d108      	bne.n	800161c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699a      	ldr	r2, [r3, #24]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001618:	619a      	str	r2, [r3, #24]
 800161a:	e007      	b.n	800162c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699a      	ldr	r2, [r3, #24]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800162a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7c5b      	ldrb	r3, [r3, #17]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d108      	bne.n	8001646 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	e007      	b.n	8001656 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699a      	ldr	r2, [r3, #24]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001654:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7c9b      	ldrb	r3, [r3, #18]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d108      	bne.n	8001670 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699a      	ldr	r2, [r3, #24]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800166c:	619a      	str	r2, [r3, #24]
 800166e:	e007      	b.n	8001680 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800167e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80016a4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0210 	bic.w	r2, r2, #16
 80016b4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699a      	ldr	r2, [r3, #24]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0204 	orr.w	r2, r2, #4
 80016cc:	619a      	str	r2, [r3, #24]
 80016ce:	e02c      	b.n	800172a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d028      	beq.n	800172a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d01c      	beq.n	800171a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016ee:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0210 	orr.w	r2, r2, #16
 80016fe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d110      	bne.n	800172a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0220 	orr.w	r2, r2, #32
 8001716:	619a      	str	r2, [r3, #24]
 8001718:	e007      	b.n	800172a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0220 	orr.w	r2, r2, #32
 8001728:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	3b01      	subs	r3, #1
 8001730:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	3b01      	subs	r3, #1
 8001738:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800173a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001742:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	3b01      	subs	r3, #1
 800174c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001752:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001754:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800175e:	d115      	bne.n	800178c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001764:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176a:	3b01      	subs	r3, #1
 800176c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800176e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001774:	3b01      	subs	r3, #1
 8001776:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001778:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	3b01      	subs	r3, #1
 8001782:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001788:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800178a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fc00 	bl	8001fa8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40006400 	.word	0x40006400
 80017cc:	40006500 	.word	0x40006500

080017d0 <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d11f      	bne.n	8001828 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b40      	cmp	r3, #64	@ 0x40
 80017ec:	d10d      	bne.n	800180a <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017f6:	f423 7100 	bic.w	r1, r3, #512	@ 0x200
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	025a      	lsls	r2, r3, #9
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001808:	e00c      	b.n	8001824 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001812:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	021a      	lsls	r2, r3, #8
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* Return function status */
    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e006      	b.n	8001836 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182c:	f043 0204 	orr.w	r2, r3, #4
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
  }
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b01      	cmp	r3, #1
 8001854:	d110      	bne.n	8001878 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699a      	ldr	r2, [r3, #24]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	e006      	b.n	8001886 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187c:	f043 0204 	orr.w	r2, r3, #4
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
  }
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	@ 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018ac:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80018ae:	7efb      	ldrb	r3, [r7, #27]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	f040 80e8 	bne.w	8001a86 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b40      	cmp	r3, #64	@ 0x40
 80018ba:	d137      	bne.n	800192c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d107      	bne.n	80018dc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0db      	b.n	8001a94 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018ec:	d10a      	bne.n	8001904 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018fe:	d101      	bne.n	8001904 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001900:	2301      	movs	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4413      	add	r3, r2
 8001916:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
 800192a:	e036      	b.n	800199a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001940:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0a3      	b.n	8001a94 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800195c:	d10a      	bne.n	8001974 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800196e:	d101      	bne.n	8001974 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001970:	2301      	movs	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4413      	add	r3, r2
 8001986:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d107      	bne.n	80019be <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0c9b      	lsrs	r3, r3, #18
 80019b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e005      	b.n	80019ca <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	3304      	adds	r3, #4
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0c1b      	lsrs	r3, r3, #16
 80019f8:	f003 020f 	and.w	r2, r3, #15
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0e1b      	lsrs	r3, r3, #24
 8001a1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0fda      	lsrs	r2, r3, #31
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	3304      	adds	r3, #4
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
 8001a3e:	e00a      	b.n	8001a56 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	441a      	add	r2, r3
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	440b      	add	r3, r1
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	3301      	adds	r3, #1
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	4a11      	ldr	r2, [pc, #68]	@ (8001aa0 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d3ec      	bcc.n	8001a40 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b40      	cmp	r3, #64	@ 0x40
 8001a6a:	d105      	bne.n	8001a78 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001a76:	e004      	b.n	8001a82 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e006      	b.n	8001a94 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8a:	f043 0208 	orr.w	r2, r3, #8
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	372c      	adds	r7, #44	@ 0x2c
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	08005bfc 	.word	0x08005bfc

08001aa4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ab6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d003      	beq.n	8001ac6 <HAL_FDCAN_ActivateNotification+0x22>
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	f040 80c8 	bne.w	8001c56 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d03b      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d031      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d027      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d004      	beq.n	8001b1e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01d      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d013      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d004      	beq.n	8001b46 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00c      	beq.n	8001b6a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d107      	bne.n	8001b6a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d13b      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d131      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d127      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d11d      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d113      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0202 	orr.w	r2, r2, #2
 8001c04:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e006      	b.n	8001c64 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5a:	f043 0202 	orr.w	r2, r3, #2
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	@ 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c7e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001cca:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd2:	6a3a      	ldr	r2, [r7, #32]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cde:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ce2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cfe:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	099b      	lsrs	r3, r3, #6
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00c      	beq.n	8001d26 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2240      	movs	r2, #64	@ 0x40
 8001d1e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f922 	bl	8001f6a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01a      	beq.n	8001d68 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d014      	beq.n	8001d68 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d46:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d60:	6939      	ldr	r1, [r7, #16]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8e2 	bl	8001f2c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d74:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f8ac 	bl	8001ed6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fbd8 	bl	8000544 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001da2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f8a1 	bl	8001eec <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	0a5b      	lsrs	r3, r3, #9
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00d      	beq.n	8001dd2 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	0a5b      	lsrs	r3, r3, #9
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f898 	bl	8001f02 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	09db      	lsrs	r3, r3, #7
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d019      	beq.n	8001e12 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	09db      	lsrs	r3, r3, #7
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d013      	beq.n	8001e12 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001df2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2280      	movs	r2, #128	@ 0x80
 8001e08:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001e0a:	68f9      	ldr	r1, [r7, #12]
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f882 	bl	8001f16 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	0b5b      	lsrs	r3, r3, #13
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00d      	beq.n	8001e3a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	0b5b      	lsrs	r3, r3, #13
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e32:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f884 	bl	8001f42 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	0bdb      	lsrs	r3, r3, #15
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00d      	beq.n	8001e62 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	0bdb      	lsrs	r3, r3, #15
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e5a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f87a 	bl	8001f56 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	0b9b      	lsrs	r3, r3, #14
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d010      	beq.n	8001e90 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	0b9b      	lsrs	r3, r3, #14
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e9e:	69f9      	ldr	r1, [r7, #28]
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f876 	bl	8001f92 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a3a      	ldr	r2, [r7, #32]
 8001eb2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f858 	bl	8001f7e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3730      	adds	r7, #48	@ 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001fb0:	4b30      	ldr	r3, [pc, #192]	@ (8002074 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001fb2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8002078 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d103      	bne.n	8001fc6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001fc4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2c      	ldr	r2, [pc, #176]	@ (800207c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d103      	bne.n	8001fd8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001fd6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fe6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fee:	041a      	lsls	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800200c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002014:	061a      	lsls	r2, r3, #24
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e005      	b.n	800205a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3304      	adds	r3, #4
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3f3      	bcc.n	800204e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	4000a400 	.word	0x4000a400
 8002078:	40006800 	.word	0x40006800
 800207c:	40006c00 	.word	0x40006c00

08002080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800208e:	e15a      	b.n	8002346 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2101      	movs	r1, #1
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 814c 	beq.w	8002340 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d005      	beq.n	80020c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d130      	bne.n	8002122 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020f6:	2201      	movs	r2, #1
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	f003 0201 	and.w	r2, r3, #1
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b03      	cmp	r3, #3
 800212c:	d017      	beq.n	800215e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2203      	movs	r2, #3
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d123      	bne.n	80021b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	08da      	lsrs	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3208      	adds	r2, #8
 8002172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	6939      	ldr	r1, [r7, #16]
 80021ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0203 	and.w	r2, r3, #3
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80a6 	beq.w	8002340 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002364 <HAL_GPIO_Init+0x2e4>)
 80021f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002364 <HAL_GPIO_Init+0x2e4>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002200:	4b58      	ldr	r3, [pc, #352]	@ (8002364 <HAL_GPIO_Init+0x2e4>)
 8002202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220c:	4a56      	ldr	r2, [pc, #344]	@ (8002368 <HAL_GPIO_Init+0x2e8>)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002236:	d01f      	beq.n	8002278 <HAL_GPIO_Init+0x1f8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a4c      	ldr	r2, [pc, #304]	@ (800236c <HAL_GPIO_Init+0x2ec>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d019      	beq.n	8002274 <HAL_GPIO_Init+0x1f4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a4b      	ldr	r2, [pc, #300]	@ (8002370 <HAL_GPIO_Init+0x2f0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d013      	beq.n	8002270 <HAL_GPIO_Init+0x1f0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a4a      	ldr	r2, [pc, #296]	@ (8002374 <HAL_GPIO_Init+0x2f4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00d      	beq.n	800226c <HAL_GPIO_Init+0x1ec>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a49      	ldr	r2, [pc, #292]	@ (8002378 <HAL_GPIO_Init+0x2f8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d007      	beq.n	8002268 <HAL_GPIO_Init+0x1e8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a48      	ldr	r2, [pc, #288]	@ (800237c <HAL_GPIO_Init+0x2fc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_GPIO_Init+0x1e4>
 8002260:	2305      	movs	r3, #5
 8002262:	e00a      	b.n	800227a <HAL_GPIO_Init+0x1fa>
 8002264:	2306      	movs	r3, #6
 8002266:	e008      	b.n	800227a <HAL_GPIO_Init+0x1fa>
 8002268:	2304      	movs	r3, #4
 800226a:	e006      	b.n	800227a <HAL_GPIO_Init+0x1fa>
 800226c:	2303      	movs	r3, #3
 800226e:	e004      	b.n	800227a <HAL_GPIO_Init+0x1fa>
 8002270:	2302      	movs	r3, #2
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x1fa>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_GPIO_Init+0x1fa>
 8002278:	2300      	movs	r3, #0
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	f002 0203 	and.w	r2, r2, #3
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	4093      	lsls	r3, r2
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228a:	4937      	ldr	r1, [pc, #220]	@ (8002368 <HAL_GPIO_Init+0x2e8>)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002298:	4b39      	ldr	r3, [pc, #228]	@ (8002380 <HAL_GPIO_Init+0x300>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022bc:	4a30      	ldr	r2, [pc, #192]	@ (8002380 <HAL_GPIO_Init+0x300>)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002380 <HAL_GPIO_Init+0x300>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022e6:	4a26      	ldr	r2, [pc, #152]	@ (8002380 <HAL_GPIO_Init+0x300>)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80022ec:	4b24      	ldr	r3, [pc, #144]	@ (8002380 <HAL_GPIO_Init+0x300>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002310:	4a1b      	ldr	r2, [pc, #108]	@ (8002380 <HAL_GPIO_Init+0x300>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002316:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <HAL_GPIO_Init+0x300>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800233a:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <HAL_GPIO_Init+0x300>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	f47f ae9d 	bne.w	8002090 <HAL_GPIO_Init+0x10>
  }
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40021000 	.word	0x40021000
 8002368:	40010000 	.word	0x40010000
 800236c:	48000400 	.word	0x48000400
 8002370:	48000800 	.word	0x48000800
 8002374:	48000c00 	.word	0x48000c00
 8002378:	48001000 	.word	0x48001000
 800237c:	48001400 	.word	0x48001400
 8002380:	40010400 	.word	0x40010400

08002384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
 8002390:	4613      	mov	r3, r2
 8002392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002394:	787b      	ldrb	r3, [r7, #1]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d141      	bne.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c2:	4b4b      	ldr	r3, [pc, #300]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ce:	d131      	bne.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023d0:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023d6:	4a46      	ldr	r2, [pc, #280]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023e0:	4b43      	ldr	r3, [pc, #268]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023e8:	4a41      	ldr	r2, [pc, #260]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023f0:	4b40      	ldr	r3, [pc, #256]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2232      	movs	r2, #50	@ 0x32
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	4a3f      	ldr	r2, [pc, #252]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	0c9b      	lsrs	r3, r3, #18
 8002402:	3301      	adds	r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002406:	e002      	b.n	800240e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3b01      	subs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800240e:	4b38      	ldr	r3, [pc, #224]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241a:	d102      	bne.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f2      	bne.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002422:	4b33      	ldr	r3, [pc, #204]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242e:	d158      	bne.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e057      	b.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002434:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800243a:	4a2d      	ldr	r2, [pc, #180]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002444:	e04d      	b.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800244c:	d141      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800244e:	4b28      	ldr	r3, [pc, #160]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800245a:	d131      	bne.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800245c:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002462:	4a23      	ldr	r2, [pc, #140]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800246c:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002474:	4a1e      	ldr	r2, [pc, #120]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800247a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800247c:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2232      	movs	r2, #50	@ 0x32
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	4a1c      	ldr	r2, [pc, #112]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	0c9b      	lsrs	r3, r3, #18
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002492:	e002      	b.n	800249a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3b01      	subs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024a6:	d102      	bne.n	80024ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f2      	bne.n	8002494 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ae:	4b10      	ldr	r3, [pc, #64]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ba:	d112      	bne.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e011      	b.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024c6:	4a0a      	ldr	r2, [pc, #40]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024d0:	e007      	b.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d2:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024da:	4a05      	ldr	r2, [pc, #20]	@ (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40007000 	.word	0x40007000
 80024f4:	20000000 	.word	0x20000000
 80024f8:	431bde83 	.word	0x431bde83

080024fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a04      	ldr	r2, [pc, #16]	@ (8002518 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002506:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800250a:	6093      	str	r3, [r2, #8]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40007000 	.word	0x40007000

0800251c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e2fe      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d075      	beq.n	8002626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253a:	4b97      	ldr	r3, [pc, #604]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002544:	4b94      	ldr	r3, [pc, #592]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b0c      	cmp	r3, #12
 8002552:	d102      	bne.n	800255a <HAL_RCC_OscConfig+0x3e>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b03      	cmp	r3, #3
 8002558:	d002      	beq.n	8002560 <HAL_RCC_OscConfig+0x44>
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d10b      	bne.n	8002578 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	4b8d      	ldr	r3, [pc, #564]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d05b      	beq.n	8002624 <HAL_RCC_OscConfig+0x108>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d157      	bne.n	8002624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e2d9      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x74>
 8002582:	4b85      	ldr	r3, [pc, #532]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a84      	ldr	r2, [pc, #528]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e01d      	b.n	80025cc <HAL_RCC_OscConfig+0xb0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x98>
 800259a:	4b7f      	ldr	r3, [pc, #508]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a7e      	ldr	r2, [pc, #504]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a7b      	ldr	r2, [pc, #492]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0xb0>
 80025b4:	4b78      	ldr	r3, [pc, #480]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a77      	ldr	r2, [pc, #476]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b75      	ldr	r3, [pc, #468]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a74      	ldr	r2, [pc, #464]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fdc6 	bl	8001164 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fdc2 	bl	8001164 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	@ 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e29e      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0xc0>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fdb2 	bl	8001164 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe fdae 	bl	8001164 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	@ 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e28a      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002616:	4b60      	ldr	r3, [pc, #384]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0xe8>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d075      	beq.n	800271e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002632:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800263c:	4b56      	ldr	r3, [pc, #344]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	d102      	bne.n	8002652 <HAL_RCC_OscConfig+0x136>
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d002      	beq.n	8002658 <HAL_RCC_OscConfig+0x13c>
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d11f      	bne.n	8002698 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002658:	4b4f      	ldr	r3, [pc, #316]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_OscConfig+0x154>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e25d      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b49      	ldr	r3, [pc, #292]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	4946      	ldr	r1, [pc, #280]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002684:	4b45      	ldr	r3, [pc, #276]	@ (800279c <HAL_RCC_OscConfig+0x280>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fd1f 	bl	80010cc <HAL_InitTick>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d043      	beq.n	800271c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e249      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d023      	beq.n	80026e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fd5a 	bl	8001164 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b4:	f7fe fd56 	bl	8001164 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e232      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c6:	4b34      	ldr	r3, [pc, #208]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4b31      	ldr	r3, [pc, #196]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	061b      	lsls	r3, r3, #24
 80026e0:	492d      	ldr	r1, [pc, #180]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
 80026e6:	e01a      	b.n	800271e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 80026ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fd36 	bl	8001164 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7fe fd32 	bl	8001164 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e20e      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270e:	4b22      	ldr	r3, [pc, #136]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1e0>
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d041      	beq.n	80027ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01c      	beq.n	800276c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002732:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002738:	4a17      	ldr	r2, [pc, #92]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7fe fd0f 	bl	8001164 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe fd0b 	bl	8001164 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1e7      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800275c:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0ef      	beq.n	800274a <HAL_RCC_OscConfig+0x22e>
 800276a:	e020      	b.n	80027ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276c:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 800276e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002772:	4a09      	ldr	r2, [pc, #36]	@ (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe fcf2 	bl	8001164 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002782:	e00d      	b.n	80027a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002784:	f7fe fcee 	bl	8001164 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d906      	bls.n	80027a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1ca      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a0:	4b8c      	ldr	r3, [pc, #560]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ea      	bne.n	8002784 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80a6 	beq.w	8002908 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027c0:	4b84      	ldr	r3, [pc, #528]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2b4>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x2b6>
 80027d0:	2300      	movs	r3, #0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	4b7f      	ldr	r3, [pc, #508]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027da:	4a7e      	ldr	r2, [pc, #504]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027e2:	4b7c      	ldr	r3, [pc, #496]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027ee:	2301      	movs	r3, #1
 80027f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f2:	4b79      	ldr	r3, [pc, #484]	@ (80029d8 <HAL_RCC_OscConfig+0x4bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d118      	bne.n	8002830 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027fe:	4b76      	ldr	r3, [pc, #472]	@ (80029d8 <HAL_RCC_OscConfig+0x4bc>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a75      	ldr	r2, [pc, #468]	@ (80029d8 <HAL_RCC_OscConfig+0x4bc>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280a:	f7fe fcab 	bl	8001164 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002812:	f7fe fca7 	bl	8001164 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e183      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002824:	4b6c      	ldr	r3, [pc, #432]	@ (80029d8 <HAL_RCC_OscConfig+0x4bc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d108      	bne.n	800284a <HAL_RCC_OscConfig+0x32e>
 8002838:	4b66      	ldr	r3, [pc, #408]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283e:	4a65      	ldr	r2, [pc, #404]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002848:	e024      	b.n	8002894 <HAL_RCC_OscConfig+0x378>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b05      	cmp	r3, #5
 8002850:	d110      	bne.n	8002874 <HAL_RCC_OscConfig+0x358>
 8002852:	4b60      	ldr	r3, [pc, #384]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002858:	4a5e      	ldr	r2, [pc, #376]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002862:	4b5c      	ldr	r3, [pc, #368]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002868:	4a5a      	ldr	r2, [pc, #360]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002872:	e00f      	b.n	8002894 <HAL_RCC_OscConfig+0x378>
 8002874:	4b57      	ldr	r3, [pc, #348]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	4a56      	ldr	r2, [pc, #344]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002884:	4b53      	ldr	r3, [pc, #332]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	4a52      	ldr	r2, [pc, #328]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 800288c:	f023 0304 	bic.w	r3, r3, #4
 8002890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d016      	beq.n	80028ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7fe fc62 	bl	8001164 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7fe fc5e 	bl	8001164 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e138      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	4b46      	ldr	r3, [pc, #280]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ed      	beq.n	80028a4 <HAL_RCC_OscConfig+0x388>
 80028c8:	e015      	b.n	80028f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ca:	f7fe fc4b 	bl	8001164 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7fe fc47 	bl	8001164 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e121      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e8:	4b3a      	ldr	r3, [pc, #232]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1ed      	bne.n	80028d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028f6:	7ffb      	ldrb	r3, [r7, #31]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fc:	4b35      	ldr	r3, [pc, #212]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	4a34      	ldr	r2, [pc, #208]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 8002902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002906:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	d03c      	beq.n	800298e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01c      	beq.n	8002956 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800291c:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 800291e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002922:	4a2c      	ldr	r2, [pc, #176]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fc1a 	bl	8001164 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002934:	f7fe fc16 	bl	8001164 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0f2      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002946:	4b23      	ldr	r3, [pc, #140]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ef      	beq.n	8002934 <HAL_RCC_OscConfig+0x418>
 8002954:	e01b      	b.n	800298e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002956:	4b1f      	ldr	r3, [pc, #124]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 8002958:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800295c:	4a1d      	ldr	r2, [pc, #116]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7fe fbfd 	bl	8001164 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800296e:	f7fe fbf9 	bl	8001164 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e0d5      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002980:	4b14      	ldr	r3, [pc, #80]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 8002982:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ef      	bne.n	800296e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80c9 	beq.w	8002b2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002998:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	f000 8083 	beq.w	8002aac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d15e      	bne.n	8002a6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a08      	ldr	r2, [pc, #32]	@ (80029d4 <HAL_RCC_OscConfig+0x4b8>)
 80029b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fe fbd3 	bl	8001164 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c0:	e00c      	b.n	80029dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fbcf 	bl	8001164 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d905      	bls.n	80029dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0ab      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029dc:	4b55      	ldr	r3, [pc, #340]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1ec      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e8:	4b52      	ldr	r3, [pc, #328]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	4b52      	ldr	r3, [pc, #328]	@ (8002b38 <HAL_RCC_OscConfig+0x61c>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6a11      	ldr	r1, [r2, #32]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029f8:	3a01      	subs	r2, #1
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	4311      	orrs	r1, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002a02:	0212      	lsls	r2, r2, #8
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a0a:	0852      	lsrs	r2, r2, #1
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0552      	lsls	r2, r2, #21
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a16:	0852      	lsrs	r2, r2, #1
 8002a18:	3a01      	subs	r2, #1
 8002a1a:	0652      	lsls	r2, r2, #25
 8002a1c:	4311      	orrs	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a22:	06d2      	lsls	r2, r2, #27
 8002a24:	430a      	orrs	r2, r1
 8002a26:	4943      	ldr	r1, [pc, #268]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b41      	ldr	r3, [pc, #260]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a40      	ldr	r2, [pc, #256]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a38:	4b3e      	ldr	r3, [pc, #248]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fb8e 	bl	8001164 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fb8a 	bl	8001164 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e066      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	4b35      	ldr	r3, [pc, #212]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x530>
 8002a6a:	e05e      	b.n	8002b2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6c:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a30      	ldr	r2, [pc, #192]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fb74 	bl	8001164 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe fb70 	bl	8001164 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e04c      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a92:	4b28      	ldr	r3, [pc, #160]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a9e:	4b25      	ldr	r3, [pc, #148]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	4924      	ldr	r1, [pc, #144]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002aa4:	4b25      	ldr	r3, [pc, #148]	@ (8002b3c <HAL_RCC_OscConfig+0x620>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60cb      	str	r3, [r1, #12]
 8002aaa:	e03e      	b.n	8002b2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e039      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_RCC_OscConfig+0x618>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0203 	and.w	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d12c      	bne.n	8002b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d123      	bne.n	8002b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d11b      	bne.n	8002b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d113      	bne.n	8002b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	019f800c 	.word	0x019f800c
 8002b3c:	feeefffc 	.word	0xfeeefffc

08002b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e11e      	b.n	8002d96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b58:	4b91      	ldr	r3, [pc, #580]	@ (8002da0 <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d910      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b8e      	ldr	r3, [pc, #568]	@ (8002da0 <HAL_RCC_ClockConfig+0x260>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 020f 	bic.w	r2, r3, #15
 8002b6e:	498c      	ldr	r1, [pc, #560]	@ (8002da0 <HAL_RCC_ClockConfig+0x260>)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b8a      	ldr	r3, [pc, #552]	@ (8002da0 <HAL_RCC_ClockConfig+0x260>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e106      	b.n	8002d96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d073      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d129      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9c:	4b81      	ldr	r3, [pc, #516]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0f4      	b.n	8002d96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002bac:	f000 f99e 	bl	8002eec <RCC_GetSysClockFreqFromPLLSource>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4a7c      	ldr	r2, [pc, #496]	@ (8002da8 <HAL_RCC_ClockConfig+0x268>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d93f      	bls.n	8002c3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bba:	4b7a      	ldr	r3, [pc, #488]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d033      	beq.n	8002c3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d12f      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bda:	4b72      	ldr	r3, [pc, #456]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002be2:	4a70      	ldr	r2, [pc, #448]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002be8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bea:	2380      	movs	r3, #128	@ 0x80
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	e024      	b.n	8002c3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0c6      	b.n	8002d96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c08:	4b66      	ldr	r3, [pc, #408]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0be      	b.n	8002d96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c18:	f000 f8ce 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4a61      	ldr	r2, [pc, #388]	@ (8002da8 <HAL_RCC_ClockConfig+0x268>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d909      	bls.n	8002c3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c26:	4b5f      	ldr	r3, [pc, #380]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c2e:	4a5d      	ldr	r2, [pc, #372]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4957      	ldr	r1, [pc, #348]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c4c:	f7fe fa8a 	bl	8001164 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c54:	f7fe fa86 	bl	8001164 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e095      	b.n	8002d96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 020c 	and.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1eb      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d023      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c94:	4b43      	ldr	r3, [pc, #268]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a42      	ldr	r2, [pc, #264]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002cac:	4b3d      	ldr	r3, [pc, #244]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002cb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b39      	ldr	r3, [pc, #228]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4936      	ldr	r1, [pc, #216]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b80      	cmp	r3, #128	@ 0x80
 8002cd4:	d105      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cd6:	4b33      	ldr	r3, [pc, #204]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	4a32      	ldr	r2, [pc, #200]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002cdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ce0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8002da0 <HAL_RCC_ClockConfig+0x260>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d21d      	bcs.n	8002d2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8002da0 <HAL_RCC_ClockConfig+0x260>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 020f 	bic.w	r2, r3, #15
 8002cf8:	4929      	ldr	r1, [pc, #164]	@ (8002da0 <HAL_RCC_ClockConfig+0x260>)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d00:	f7fe fa30 	bl	8001164 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe fa2c 	bl	8001164 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e03b      	b.n	8002d96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <HAL_RCC_ClockConfig+0x260>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1ed      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d38:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4917      	ldr	r1, [pc, #92]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d56:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	490f      	ldr	r1, [pc, #60]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d6a:	f000 f825 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <HAL_RCC_ClockConfig+0x264>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	490c      	ldr	r1, [pc, #48]	@ (8002dac <HAL_RCC_ClockConfig+0x26c>)
 8002d7c:	5ccb      	ldrb	r3, [r1, r3]
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <HAL_RCC_ClockConfig+0x270>)
 8002d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002db4 <HAL_RCC_ClockConfig+0x274>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe f99c 	bl	80010cc <HAL_InitTick>
 8002d94:	4603      	mov	r3, r0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40022000 	.word	0x40022000
 8002da4:	40021000 	.word	0x40021000
 8002da8:	04c4b400 	.word	0x04c4b400
 8002dac:	08005be4 	.word	0x08005be4
 8002db0:	20000000 	.word	0x20000000
 8002db4:	20000024 	.word	0x20000024

08002db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d102      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dca:	4b2a      	ldr	r3, [pc, #168]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	e047      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002dd0:	4b27      	ldr	r3, [pc, #156]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d102      	bne.n	8002de2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ddc:	4b26      	ldr	r3, [pc, #152]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	e03e      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002de2:	4b23      	ldr	r3, [pc, #140]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d136      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dee:	4b20      	ldr	r3, [pc, #128]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002df8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3301      	adds	r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d10c      	bne.n	8002e26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	4a16      	ldr	r2, [pc, #88]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e16:	68d2      	ldr	r2, [r2, #12]
 8002e18:	0a12      	lsrs	r2, r2, #8
 8002e1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	617b      	str	r3, [r7, #20]
      break;
 8002e24:	e00c      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e26:	4a13      	ldr	r2, [pc, #76]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2e:	4a10      	ldr	r2, [pc, #64]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e30:	68d2      	ldr	r2, [r2, #12]
 8002e32:	0a12      	lsrs	r2, r2, #8
 8002e34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
      break;
 8002e3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0e5b      	lsrs	r3, r3, #25
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e001      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e60:	693b      	ldr	r3, [r7, #16]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	00f42400 	.word	0x00f42400
 8002e78:	007a1200 	.word	0x007a1200

08002e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b03      	ldr	r3, [pc, #12]	@ (8002e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000000 	.word	0x20000000

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e98:	f7ff fff0 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4904      	ldr	r1, [pc, #16]	@ (8002ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08005bf4 	.word	0x08005bf4

08002ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ec4:	f7ff ffda 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0adb      	lsrs	r3, r3, #11
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4904      	ldr	r1, [pc, #16]	@ (8002ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	08005bf4 	.word	0x08005bf4

08002eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3301      	adds	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d10c      	bne.n	8002f2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f10:	4a17      	ldr	r2, [pc, #92]	@ (8002f70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f1a:	68d2      	ldr	r2, [r2, #12]
 8002f1c:	0a12      	lsrs	r2, r2, #8
 8002f1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	617b      	str	r3, [r7, #20]
    break;
 8002f28:	e00c      	b.n	8002f44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f2a:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	4a0e      	ldr	r2, [pc, #56]	@ (8002f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f34:	68d2      	ldr	r2, [r2, #12]
 8002f36:	0a12      	lsrs	r2, r2, #8
 8002f38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f3c:	fb02 f303 	mul.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    break;
 8002f42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f44:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0e5b      	lsrs	r3, r3, #25
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f5e:	687b      	ldr	r3, [r7, #4]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	007a1200 	.word	0x007a1200
 8002f74:	00f42400 	.word	0x00f42400

08002f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f80:	2300      	movs	r3, #0
 8002f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f84:	2300      	movs	r3, #0
 8002f86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8098 	beq.w	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b43      	ldr	r3, [pc, #268]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4b40      	ldr	r3, [pc, #256]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002faa:	4a3f      	ldr	r2, [pc, #252]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a39      	ldr	r2, [pc, #228]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fce:	f7fe f8c9 	bl	8001164 <HAL_GetTick>
 8002fd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fd4:	e009      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd6:	f7fe f8c5 	bl	8001164 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d902      	bls.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	74fb      	strb	r3, [r7, #19]
        break;
 8002fe8:	e005      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fea:	4b30      	ldr	r3, [pc, #192]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ef      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d159      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003006:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01e      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	429a      	cmp	r2, r3
 8003016:	d019      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003018:	4b23      	ldr	r3, [pc, #140]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003022:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003024:	4b20      	ldr	r3, [pc, #128]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302a:	4a1f      	ldr	r2, [pc, #124]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003034:	4b1c      	ldr	r3, [pc, #112]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303a:	4a1b      	ldr	r2, [pc, #108]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800303c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003044:	4a18      	ldr	r2, [pc, #96]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fe f885 	bl	8001164 <HAL_GetTick>
 800305a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305c:	e00b      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7fe f881 	bl	8001164 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d902      	bls.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	74fb      	strb	r3, [r7, #19]
            break;
 8003074:	e006      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003076:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ec      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10b      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800308a:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003098:	4903      	ldr	r1, [pc, #12]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030a0:	e008      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	74bb      	strb	r3, [r7, #18]
 80030a6:	e005      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b4:	7c7b      	ldrb	r3, [r7, #17]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4ba7      	ldr	r3, [pc, #668]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	4aa6      	ldr	r2, [pc, #664]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d2:	4ba1      	ldr	r3, [pc, #644]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d8:	f023 0203 	bic.w	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	499d      	ldr	r1, [pc, #628]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f4:	4b98      	ldr	r3, [pc, #608]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fa:	f023 020c 	bic.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4995      	ldr	r1, [pc, #596]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003116:	4b90      	ldr	r3, [pc, #576]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	498c      	ldr	r1, [pc, #560]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003138:	4b87      	ldr	r3, [pc, #540]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	4984      	ldr	r1, [pc, #528]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800315a:	4b7f      	ldr	r3, [pc, #508]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	497b      	ldr	r1, [pc, #492]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800317c:	4b76      	ldr	r3, [pc, #472]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	4973      	ldr	r1, [pc, #460]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800319e:	4b6e      	ldr	r3, [pc, #440]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	496a      	ldr	r1, [pc, #424]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031c0:	4b65      	ldr	r3, [pc, #404]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4962      	ldr	r1, [pc, #392]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	4959      	ldr	r1, [pc, #356]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003204:	4b54      	ldr	r3, [pc, #336]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003206:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800320a:	f023 0203 	bic.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	4951      	ldr	r1, [pc, #324]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003226:	4b4c      	ldr	r3, [pc, #304]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	4948      	ldr	r1, [pc, #288]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d015      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003248:	4b43      	ldr	r3, [pc, #268]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	4940      	ldr	r1, [pc, #256]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003266:	d105      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003268:	4b3b      	ldr	r3, [pc, #236]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a3a      	ldr	r2, [pc, #232]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003272:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800327c:	2b00      	cmp	r3, #0
 800327e:	d015      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003280:	4b35      	ldr	r3, [pc, #212]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328e:	4932      	ldr	r1, [pc, #200]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800329e:	d105      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d015      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032b8:	4b27      	ldr	r3, [pc, #156]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c6:	4924      	ldr	r1, [pc, #144]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d6:	d105      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d015      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032f0:	4b19      	ldr	r3, [pc, #100]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fe:	4916      	ldr	r1, [pc, #88]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800330e:	d105      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003310:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a10      	ldr	r2, [pc, #64]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800331a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d019      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003328:	4b0b      	ldr	r3, [pc, #44]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	4908      	ldr	r1, [pc, #32]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003346:	d109      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003348:	4b03      	ldr	r3, [pc, #12]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a02      	ldr	r2, [pc, #8]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003352:	60d3      	str	r3, [r2, #12]
 8003354:	e002      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d015      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003368:	4b29      	ldr	r3, [pc, #164]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	4926      	ldr	r1, [pc, #152]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003386:	d105      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003388:	4b21      	ldr	r3, [pc, #132]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4a20      	ldr	r2, [pc, #128]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003392:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d015      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80033a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ae:	4918      	ldr	r1, [pc, #96]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033be:	d105      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033c0:	4b13      	ldr	r3, [pc, #76]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a12      	ldr	r2, [pc, #72]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80033d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e6:	490a      	ldr	r1, [pc, #40]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033f6:	d105      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a04      	ldr	r2, [pc, #16]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003402:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003404:	7cbb      	ldrb	r3, [r7, #18]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e09d      	b.n	8003562 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	2b00      	cmp	r3, #0
 800342c:	d108      	bne.n	8003440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003436:	d009      	beq.n	800344c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	61da      	str	r2, [r3, #28]
 800343e:	e005      	b.n	800344c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fc28 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003482:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800348c:	d902      	bls.n	8003494 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e002      	b.n	800349a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003498:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034a2:	d007      	beq.n	80034b4 <HAL_SPI_Init+0xa0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034ac:	d002      	beq.n	80034b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f6:	ea42 0103 	orr.w	r1, r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	f003 0204 	and.w	r2, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003530:	ea42 0103 	orr.w	r1, r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e042      	b.n	8003602 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd fbd6 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2224      	movs	r2, #36	@ 0x24
 8003598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 ff19 	bl	80043ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fc1a 	bl	8003df4 <UART_SetConfig>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e01b      	b.n	8003602 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f042 0201 	orr.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 ff98 	bl	8004530 <UART_CheckIdleState>
 8003600:	4603      	mov	r3, r0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800360c:	b480      	push	{r7}
 800360e:	b091      	sub	sp, #68	@ 0x44
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003620:	2b20      	cmp	r3, #32
 8003622:	d178      	bne.n	8003716 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_UART_Transmit_IT+0x24>
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e071      	b.n	8003718 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	88fa      	ldrh	r2, [r7, #6]
 800363e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	88fa      	ldrh	r2, [r7, #6]
 8003646:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2221      	movs	r2, #33	@ 0x21
 800365c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003664:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003668:	d12a      	bne.n	80036c0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003672:	d107      	bne.n	8003684 <HAL_UART_Transmit_IT+0x78>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d103      	bne.n	8003684 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a29      	ldr	r2, [pc, #164]	@ (8003724 <HAL_UART_Transmit_IT+0x118>)
 8003680:	679a      	str	r2, [r3, #120]	@ 0x78
 8003682:	e002      	b.n	800368a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a28      	ldr	r2, [pc, #160]	@ (8003728 <HAL_UART_Transmit_IT+0x11c>)
 8003688:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3308      	adds	r3, #8
 8003690:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3308      	adds	r3, #8
 80036a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036aa:	637a      	str	r2, [r7, #52]	@ 0x34
 80036ac:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80036b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e5      	bne.n	800368a <HAL_UART_Transmit_IT+0x7e>
 80036be:	e028      	b.n	8003712 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c8:	d107      	bne.n	80036da <HAL_UART_Transmit_IT+0xce>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d103      	bne.n	80036da <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4a15      	ldr	r2, [pc, #84]	@ (800372c <HAL_UART_Transmit_IT+0x120>)
 80036d6:	679a      	str	r2, [r3, #120]	@ 0x78
 80036d8:	e002      	b.n	80036e0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4a14      	ldr	r2, [pc, #80]	@ (8003730 <HAL_UART_Transmit_IT+0x124>)
 80036de:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	613b      	str	r3, [r7, #16]
   return(result);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036fe:	623b      	str	r3, [r7, #32]
 8003700:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	69f9      	ldr	r1, [r7, #28]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	61bb      	str	r3, [r7, #24]
   return(result);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e6      	bne.n	80036e0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e000      	b.n	8003718 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003716:	2302      	movs	r3, #2
  }
}
 8003718:	4618      	mov	r0, r3
 800371a:	3744      	adds	r7, #68	@ 0x44
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	08004cef 	.word	0x08004cef
 8003728:	08004c0f 	.word	0x08004c0f
 800372c:	08004b4d 	.word	0x08004b4d
 8003730:	08004a95 	.word	0x08004a95

08003734 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b0ba      	sub	sp, #232	@ 0xe8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800375a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800375e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003762:	4013      	ands	r3, r2
 8003764:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d11b      	bne.n	80037a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800377c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d105      	bne.n	8003794 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800378c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8300 	beq.w	8003d9e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
      }
      return;
 80037a6:	e2fa      	b.n	8003d9e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8123 	beq.w	80039f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80037b6:	4b8d      	ldr	r3, [pc, #564]	@ (80039ec <HAL_UART_IRQHandler+0x2b8>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80037c2:	4b8b      	ldr	r3, [pc, #556]	@ (80039f0 <HAL_UART_IRQHandler+0x2bc>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8116 	beq.w	80039f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d011      	beq.n	80037fc <HAL_UART_IRQHandler+0xc8>
 80037d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	f043 0201 	orr.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d011      	beq.n	800382c <HAL_UART_IRQHandler+0xf8>
 8003808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2202      	movs	r2, #2
 800381a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	f043 0204 	orr.w	r2, r3, #4
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800382c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d011      	beq.n	800385c <HAL_UART_IRQHandler+0x128>
 8003838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00b      	beq.n	800385c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2204      	movs	r2, #4
 800384a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	f043 0202 	orr.w	r2, r3, #2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800385c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d017      	beq.n	8003898 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003874:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003878:	4b5c      	ldr	r3, [pc, #368]	@ (80039ec <HAL_UART_IRQHandler+0x2b8>)
 800387a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2208      	movs	r2, #8
 8003886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	f043 0208 	orr.w	r2, r3, #8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d012      	beq.n	80038ca <HAL_UART_IRQHandler+0x196>
 80038a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00c      	beq.n	80038ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8266 	beq.w	8003da2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d013      	beq.n	800390a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d105      	bne.n	80038fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003910:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391e:	2b40      	cmp	r3, #64	@ 0x40
 8003920:	d005      	beq.n	800392e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003926:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800392a:	2b00      	cmp	r3, #0
 800392c:	d054      	beq.n	80039d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f001 f838 	bl	80049a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393e:	2b40      	cmp	r3, #64	@ 0x40
 8003940:	d146      	bne.n	80039d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3308      	adds	r3, #8
 8003948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800395c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3308      	adds	r3, #8
 800396a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800396e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800397a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1d9      	bne.n	8003942 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003994:	2b00      	cmp	r3, #0
 8003996:	d017      	beq.n	80039c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800399e:	4a15      	ldr	r2, [pc, #84]	@ (80039f4 <HAL_UART_IRQHandler+0x2c0>)
 80039a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd fd4f 	bl	800144c <HAL_DMA_Abort_IT>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d019      	beq.n	80039e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80039c2:	4610      	mov	r0, r2
 80039c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c6:	e00f      	b.n	80039e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fa09 	bl	8003de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ce:	e00b      	b.n	80039e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fa05 	bl	8003de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d6:	e007      	b.n	80039e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fa01 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80039e6:	e1dc      	b.n	8003da2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e8:	bf00      	nop
    return;
 80039ea:	e1da      	b.n	8003da2 <HAL_UART_IRQHandler+0x66e>
 80039ec:	10000001 	.word	0x10000001
 80039f0:	04000120 	.word	0x04000120
 80039f4:	08004a71 	.word	0x08004a71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	f040 8170 	bne.w	8003ce2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8169 	beq.w	8003ce2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8162 	beq.w	8003ce2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2210      	movs	r2, #16
 8003a24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a30:	2b40      	cmp	r3, #64	@ 0x40
 8003a32:	f040 80d8 	bne.w	8003be6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80af 	beq.w	8003bac <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	f080 80a7 	bcs.w	8003bac <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f040 8087 	bne.w	8003b8a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003aa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003aaa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1da      	bne.n	8003a7c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3308      	adds	r3, #8
 8003acc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003aea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003afc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e1      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3308      	adds	r3, #8
 8003b08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3308      	adds	r3, #8
 8003b22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e3      	bne.n	8003b02 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b58:	f023 0310 	bic.w	r3, r3, #16
 8003b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e4      	bne.n	8003b48 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd fc08 	bl	800139a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7fd f9f9 	bl	8000f9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003baa:	e0fc      	b.n	8003da6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	f040 80f5 	bne.w	8003da6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	f040 80eb 	bne.w	8003da6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd f9dc 	bl	8000f9c <HAL_UARTEx_RxEventCallback>
      return;
 8003be4:	e0df      	b.n	8003da6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80d1 	beq.w	8003daa <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80cc 	beq.w	8003daa <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e4      	bne.n	8003c12 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	623b      	str	r3, [r7, #32]
   return(result);
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c70:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e1      	bne.n	8003c48 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f023 0310 	bic.w	r3, r3, #16
 8003cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	69b9      	ldr	r1, [r7, #24]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e4      	bne.n	8003c98 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd f95e 	bl	8000f9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ce0:	e063      	b.n	8003daa <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00e      	beq.n	8003d0c <HAL_UART_IRQHandler+0x5d8>
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f001 fdb3 	bl	8005870 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d0a:	e051      	b.n	8003db0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d014      	beq.n	8003d42 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d03a      	beq.n	8003dae <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
    }
    return;
 8003d40:	e035      	b.n	8003dae <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <HAL_UART_IRQHandler+0x62e>
 8003d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f001 f83c 	bl	8004dd8 <UART_EndTransmit_IT>
    return;
 8003d60:	e026      	b.n	8003db0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_UART_IRQHandler+0x64e>
 8003d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f001 fd8c 	bl	8005898 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d80:	e016      	b.n	8003db0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d010      	beq.n	8003db0 <HAL_UART_IRQHandler+0x67c>
 8003d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da0c      	bge.n	8003db0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f001 fd74 	bl	8005884 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d9c:	e008      	b.n	8003db0 <HAL_UART_IRQHandler+0x67c>
      return;
 8003d9e:	bf00      	nop
 8003da0:	e006      	b.n	8003db0 <HAL_UART_IRQHandler+0x67c>
    return;
 8003da2:	bf00      	nop
 8003da4:	e004      	b.n	8003db0 <HAL_UART_IRQHandler+0x67c>
      return;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <HAL_UART_IRQHandler+0x67c>
      return;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HAL_UART_IRQHandler+0x67c>
    return;
 8003dae:	bf00      	nop
  }
}
 8003db0:	37e8      	adds	r7, #232	@ 0xe8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop

08003db8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df8:	b08c      	sub	sp, #48	@ 0x30
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4baa      	ldr	r3, [pc, #680]	@ (80040cc <UART_SetConfig+0x2d8>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a9f      	ldr	r2, [pc, #636]	@ (80040d0 <UART_SetConfig+0x2dc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003e6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7e:	f023 010f 	bic.w	r1, r3, #15
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a90      	ldr	r2, [pc, #576]	@ (80040d4 <UART_SetConfig+0x2e0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d125      	bne.n	8003ee4 <UART_SetConfig+0xf0>
 8003e98:	4b8f      	ldr	r3, [pc, #572]	@ (80040d8 <UART_SetConfig+0x2e4>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d81a      	bhi.n	8003edc <UART_SetConfig+0xe8>
 8003ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <UART_SetConfig+0xb8>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ecd 	.word	0x08003ecd
 8003eb4:	08003ec5 	.word	0x08003ec5
 8003eb8:	08003ed5 	.word	0x08003ed5
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec2:	e116      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eca:	e112      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed2:	e10e      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003ed4:	2308      	movs	r3, #8
 8003ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eda:	e10a      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003edc:	2310      	movs	r3, #16
 8003ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee2:	e106      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a7c      	ldr	r2, [pc, #496]	@ (80040dc <UART_SetConfig+0x2e8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d138      	bne.n	8003f60 <UART_SetConfig+0x16c>
 8003eee:	4b7a      	ldr	r3, [pc, #488]	@ (80040d8 <UART_SetConfig+0x2e4>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b0c      	cmp	r3, #12
 8003efa:	d82d      	bhi.n	8003f58 <UART_SetConfig+0x164>
 8003efc:	a201      	add	r2, pc, #4	@ (adr r2, 8003f04 <UART_SetConfig+0x110>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f39 	.word	0x08003f39
 8003f08:	08003f59 	.word	0x08003f59
 8003f0c:	08003f59 	.word	0x08003f59
 8003f10:	08003f59 	.word	0x08003f59
 8003f14:	08003f49 	.word	0x08003f49
 8003f18:	08003f59 	.word	0x08003f59
 8003f1c:	08003f59 	.word	0x08003f59
 8003f20:	08003f59 	.word	0x08003f59
 8003f24:	08003f41 	.word	0x08003f41
 8003f28:	08003f59 	.word	0x08003f59
 8003f2c:	08003f59 	.word	0x08003f59
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f51 	.word	0x08003f51
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f3e:	e0d8      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003f40:	2302      	movs	r3, #2
 8003f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f46:	e0d4      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003f48:	2304      	movs	r3, #4
 8003f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f4e:	e0d0      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003f50:	2308      	movs	r3, #8
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f56:	e0cc      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f5e:	e0c8      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5e      	ldr	r2, [pc, #376]	@ (80040e0 <UART_SetConfig+0x2ec>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d125      	bne.n	8003fb6 <UART_SetConfig+0x1c2>
 8003f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80040d8 <UART_SetConfig+0x2e4>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f74:	2b30      	cmp	r3, #48	@ 0x30
 8003f76:	d016      	beq.n	8003fa6 <UART_SetConfig+0x1b2>
 8003f78:	2b30      	cmp	r3, #48	@ 0x30
 8003f7a:	d818      	bhi.n	8003fae <UART_SetConfig+0x1ba>
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d00a      	beq.n	8003f96 <UART_SetConfig+0x1a2>
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d814      	bhi.n	8003fae <UART_SetConfig+0x1ba>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <UART_SetConfig+0x19a>
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d008      	beq.n	8003f9e <UART_SetConfig+0x1aa>
 8003f8c:	e00f      	b.n	8003fae <UART_SetConfig+0x1ba>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f94:	e0ad      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003f96:	2302      	movs	r3, #2
 8003f98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f9c:	e0a9      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fa4:	e0a5      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fac:	e0a1      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003fae:	2310      	movs	r3, #16
 8003fb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fb4:	e09d      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a4a      	ldr	r2, [pc, #296]	@ (80040e4 <UART_SetConfig+0x2f0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d125      	bne.n	800400c <UART_SetConfig+0x218>
 8003fc0:	4b45      	ldr	r3, [pc, #276]	@ (80040d8 <UART_SetConfig+0x2e4>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003fca:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fcc:	d016      	beq.n	8003ffc <UART_SetConfig+0x208>
 8003fce:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fd0:	d818      	bhi.n	8004004 <UART_SetConfig+0x210>
 8003fd2:	2b80      	cmp	r3, #128	@ 0x80
 8003fd4:	d00a      	beq.n	8003fec <UART_SetConfig+0x1f8>
 8003fd6:	2b80      	cmp	r3, #128	@ 0x80
 8003fd8:	d814      	bhi.n	8004004 <UART_SetConfig+0x210>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <UART_SetConfig+0x1f0>
 8003fde:	2b40      	cmp	r3, #64	@ 0x40
 8003fe0:	d008      	beq.n	8003ff4 <UART_SetConfig+0x200>
 8003fe2:	e00f      	b.n	8004004 <UART_SetConfig+0x210>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fea:	e082      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003fec:	2302      	movs	r3, #2
 8003fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ff2:	e07e      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ffa:	e07a      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004002:	e076      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8004004:	2310      	movs	r3, #16
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800400a:	e072      	b.n	80040f2 <UART_SetConfig+0x2fe>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a35      	ldr	r2, [pc, #212]	@ (80040e8 <UART_SetConfig+0x2f4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d12a      	bne.n	800406c <UART_SetConfig+0x278>
 8004016:	4b30      	ldr	r3, [pc, #192]	@ (80040d8 <UART_SetConfig+0x2e4>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004020:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004024:	d01a      	beq.n	800405c <UART_SetConfig+0x268>
 8004026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800402a:	d81b      	bhi.n	8004064 <UART_SetConfig+0x270>
 800402c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004030:	d00c      	beq.n	800404c <UART_SetConfig+0x258>
 8004032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004036:	d815      	bhi.n	8004064 <UART_SetConfig+0x270>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <UART_SetConfig+0x250>
 800403c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004040:	d008      	beq.n	8004054 <UART_SetConfig+0x260>
 8004042:	e00f      	b.n	8004064 <UART_SetConfig+0x270>
 8004044:	2300      	movs	r3, #0
 8004046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800404a:	e052      	b.n	80040f2 <UART_SetConfig+0x2fe>
 800404c:	2302      	movs	r3, #2
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004052:	e04e      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8004054:	2304      	movs	r3, #4
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800405a:	e04a      	b.n	80040f2 <UART_SetConfig+0x2fe>
 800405c:	2308      	movs	r3, #8
 800405e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004062:	e046      	b.n	80040f2 <UART_SetConfig+0x2fe>
 8004064:	2310      	movs	r3, #16
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800406a:	e042      	b.n	80040f2 <UART_SetConfig+0x2fe>
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a17      	ldr	r2, [pc, #92]	@ (80040d0 <UART_SetConfig+0x2dc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d13a      	bne.n	80040ec <UART_SetConfig+0x2f8>
 8004076:	4b18      	ldr	r3, [pc, #96]	@ (80040d8 <UART_SetConfig+0x2e4>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004080:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004084:	d01a      	beq.n	80040bc <UART_SetConfig+0x2c8>
 8004086:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800408a:	d81b      	bhi.n	80040c4 <UART_SetConfig+0x2d0>
 800408c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004090:	d00c      	beq.n	80040ac <UART_SetConfig+0x2b8>
 8004092:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004096:	d815      	bhi.n	80040c4 <UART_SetConfig+0x2d0>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <UART_SetConfig+0x2b0>
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a0:	d008      	beq.n	80040b4 <UART_SetConfig+0x2c0>
 80040a2:	e00f      	b.n	80040c4 <UART_SetConfig+0x2d0>
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040aa:	e022      	b.n	80040f2 <UART_SetConfig+0x2fe>
 80040ac:	2302      	movs	r3, #2
 80040ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040b2:	e01e      	b.n	80040f2 <UART_SetConfig+0x2fe>
 80040b4:	2304      	movs	r3, #4
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ba:	e01a      	b.n	80040f2 <UART_SetConfig+0x2fe>
 80040bc:	2308      	movs	r3, #8
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040c2:	e016      	b.n	80040f2 <UART_SetConfig+0x2fe>
 80040c4:	2310      	movs	r3, #16
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ca:	e012      	b.n	80040f2 <UART_SetConfig+0x2fe>
 80040cc:	cfff69f3 	.word	0xcfff69f3
 80040d0:	40008000 	.word	0x40008000
 80040d4:	40013800 	.word	0x40013800
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40004400 	.word	0x40004400
 80040e0:	40004800 	.word	0x40004800
 80040e4:	40004c00 	.word	0x40004c00
 80040e8:	40005000 	.word	0x40005000
 80040ec:	2310      	movs	r3, #16
 80040ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4aae      	ldr	r2, [pc, #696]	@ (80043b0 <UART_SetConfig+0x5bc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	f040 8097 	bne.w	800422c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004102:	2b08      	cmp	r3, #8
 8004104:	d823      	bhi.n	800414e <UART_SetConfig+0x35a>
 8004106:	a201      	add	r2, pc, #4	@ (adr r2, 800410c <UART_SetConfig+0x318>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004131 	.word	0x08004131
 8004110:	0800414f 	.word	0x0800414f
 8004114:	08004139 	.word	0x08004139
 8004118:	0800414f 	.word	0x0800414f
 800411c:	0800413f 	.word	0x0800413f
 8004120:	0800414f 	.word	0x0800414f
 8004124:	0800414f 	.word	0x0800414f
 8004128:	0800414f 	.word	0x0800414f
 800412c:	08004147 	.word	0x08004147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7fe feb0 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8004134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004136:	e010      	b.n	800415a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004138:	4b9e      	ldr	r3, [pc, #632]	@ (80043b4 <UART_SetConfig+0x5c0>)
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800413c:	e00d      	b.n	800415a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800413e:	f7fe fe3b 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8004142:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004144:	e009      	b.n	800415a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800414a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800414c:	e005      	b.n	800415a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004158:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8130 	beq.w	80043c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	4a94      	ldr	r2, [pc, #592]	@ (80043b8 <UART_SetConfig+0x5c4>)
 8004168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800416c:	461a      	mov	r2, r3
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	fbb3 f3f2 	udiv	r3, r3, r2
 8004174:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	429a      	cmp	r2, r3
 8004184:	d305      	bcc.n	8004192 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	429a      	cmp	r2, r3
 8004190:	d903      	bls.n	800419a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004198:	e113      	b.n	80043c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	2200      	movs	r2, #0
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	60fa      	str	r2, [r7, #12]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	4a84      	ldr	r2, [pc, #528]	@ (80043b8 <UART_SetConfig+0x5c4>)
 80041a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2200      	movs	r2, #0
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041bc:	f7fc f82c 	bl	8000218 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	020b      	lsls	r3, r1, #8
 80041d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041d6:	0202      	lsls	r2, r0, #8
 80041d8:	6979      	ldr	r1, [r7, #20]
 80041da:	6849      	ldr	r1, [r1, #4]
 80041dc:	0849      	lsrs	r1, r1, #1
 80041de:	2000      	movs	r0, #0
 80041e0:	460c      	mov	r4, r1
 80041e2:	4605      	mov	r5, r0
 80041e4:	eb12 0804 	adds.w	r8, r2, r4
 80041e8:	eb43 0905 	adc.w	r9, r3, r5
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	469a      	mov	sl, r3
 80041f4:	4693      	mov	fp, r2
 80041f6:	4652      	mov	r2, sl
 80041f8:	465b      	mov	r3, fp
 80041fa:	4640      	mov	r0, r8
 80041fc:	4649      	mov	r1, r9
 80041fe:	f7fc f80b 	bl	8000218 <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4613      	mov	r3, r2
 8004208:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004210:	d308      	bcc.n	8004224 <UART_SetConfig+0x430>
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004218:	d204      	bcs.n	8004224 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6a3a      	ldr	r2, [r7, #32]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	e0ce      	b.n	80043c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800422a:	e0ca      	b.n	80043c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004234:	d166      	bne.n	8004304 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004236:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800423a:	2b08      	cmp	r3, #8
 800423c:	d827      	bhi.n	800428e <UART_SetConfig+0x49a>
 800423e:	a201      	add	r2, pc, #4	@ (adr r2, 8004244 <UART_SetConfig+0x450>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004269 	.word	0x08004269
 8004248:	08004271 	.word	0x08004271
 800424c:	08004279 	.word	0x08004279
 8004250:	0800428f 	.word	0x0800428f
 8004254:	0800427f 	.word	0x0800427f
 8004258:	0800428f 	.word	0x0800428f
 800425c:	0800428f 	.word	0x0800428f
 8004260:	0800428f 	.word	0x0800428f
 8004264:	08004287 	.word	0x08004287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004268:	f7fe fe14 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 800426c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800426e:	e014      	b.n	800429a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004270:	f7fe fe26 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8004274:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004276:	e010      	b.n	800429a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004278:	4b4e      	ldr	r3, [pc, #312]	@ (80043b4 <UART_SetConfig+0x5c0>)
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800427c:	e00d      	b.n	800429a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800427e:	f7fe fd9b 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8004282:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004284:	e009      	b.n	800429a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800428c:	e005      	b.n	800429a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004298:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8090 	beq.w	80043c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	4a44      	ldr	r2, [pc, #272]	@ (80043b8 <UART_SetConfig+0x5c4>)
 80042a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b4:	005a      	lsls	r2, r3, #1
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	441a      	add	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	2b0f      	cmp	r3, #15
 80042cc:	d916      	bls.n	80042fc <UART_SetConfig+0x508>
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d4:	d212      	bcs.n	80042fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f023 030f 	bic.w	r3, r3, #15
 80042de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	8bfb      	ldrh	r3, [r7, #30]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	8bfa      	ldrh	r2, [r7, #30]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	e062      	b.n	80043c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004302:	e05e      	b.n	80043c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004304:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004308:	2b08      	cmp	r3, #8
 800430a:	d828      	bhi.n	800435e <UART_SetConfig+0x56a>
 800430c:	a201      	add	r2, pc, #4	@ (adr r2, 8004314 <UART_SetConfig+0x520>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004339 	.word	0x08004339
 8004318:	08004341 	.word	0x08004341
 800431c:	08004349 	.word	0x08004349
 8004320:	0800435f 	.word	0x0800435f
 8004324:	0800434f 	.word	0x0800434f
 8004328:	0800435f 	.word	0x0800435f
 800432c:	0800435f 	.word	0x0800435f
 8004330:	0800435f 	.word	0x0800435f
 8004334:	08004357 	.word	0x08004357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004338:	f7fe fdac 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 800433c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800433e:	e014      	b.n	800436a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004340:	f7fe fdbe 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8004344:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004346:	e010      	b.n	800436a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004348:	4b1a      	ldr	r3, [pc, #104]	@ (80043b4 <UART_SetConfig+0x5c0>)
 800434a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800434c:	e00d      	b.n	800436a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434e:	f7fe fd33 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8004352:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004354:	e009      	b.n	800436a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800435c:	e005      	b.n	800436a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004368:	bf00      	nop
    }

    if (pclk != 0U)
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	2b00      	cmp	r3, #0
 800436e:	d028      	beq.n	80043c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	4a10      	ldr	r2, [pc, #64]	@ (80043b8 <UART_SetConfig+0x5c4>)
 8004376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800437a:	461a      	mov	r2, r3
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	441a      	add	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	d910      	bls.n	80043bc <UART_SetConfig+0x5c8>
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a0:	d20c      	bcs.n	80043bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	e009      	b.n	80043c2 <UART_SetConfig+0x5ce>
 80043ae:	bf00      	nop
 80043b0:	40008000 	.word	0x40008000
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	08005c0c 	.word	0x08005c0c
      }
      else
      {
        ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2200      	movs	r2, #0
 80043dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80043de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3730      	adds	r7, #48	@ 0x30
 80043e6:	46bd      	mov	sp, r7
 80043e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01a      	beq.n	8004502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ea:	d10a      	bne.n	8004502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b098      	sub	sp, #96	@ 0x60
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004540:	f7fc fe10 	bl	8001164 <HAL_GetTick>
 8004544:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d12f      	bne.n	80045b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800455c:	2200      	movs	r2, #0
 800455e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f88e 	bl	8004684 <UART_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d022      	beq.n	80045b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800457c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004582:	653b      	str	r3, [r7, #80]	@ 0x50
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800458c:	647b      	str	r3, [r7, #68]	@ 0x44
 800458e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800459a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e6      	bne.n	800456e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e063      	b.n	800467c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d149      	bne.n	8004656 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ca:	2200      	movs	r2, #0
 80045cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f857 	bl	8004684 <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d03c      	beq.n	8004656 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	623b      	str	r3, [r7, #32]
   return(result);
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80045fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e6      	bne.n	80045dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3308      	adds	r3, #8
 8004614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	60fb      	str	r3, [r7, #12]
   return(result);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800462e:	61fa      	str	r2, [r7, #28]
 8004630:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	69b9      	ldr	r1, [r7, #24]
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	617b      	str	r3, [r7, #20]
   return(result);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e012      	b.n	800467c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3758      	adds	r7, #88	@ 0x58
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004694:	e04f      	b.n	8004736 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d04b      	beq.n	8004736 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469e:	f7fc fd61 	bl	8001164 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e04e      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d037      	beq.n	8004736 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b80      	cmp	r3, #128	@ 0x80
 80046ca:	d034      	beq.n	8004736 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b40      	cmp	r3, #64	@ 0x40
 80046d0:	d031      	beq.n	8004736 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d110      	bne.n	8004702 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2208      	movs	r2, #8
 80046e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f95b 	bl	80049a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2208      	movs	r2, #8
 80046f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e029      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800470c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004710:	d111      	bne.n	8004736 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800471a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f941 	bl	80049a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e00f      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4013      	ands	r3, r2
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	429a      	cmp	r2, r3
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	429a      	cmp	r2, r3
 8004752:	d0a0      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004760:	b480      	push	{r7}
 8004762:	b0a3      	sub	sp, #140	@ 0x8c
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	88fa      	ldrh	r2, [r7, #6]
 8004780:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004792:	d10e      	bne.n	80047b2 <UART_Start_Receive_IT+0x52>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <UART_Start_Receive_IT+0x48>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80047a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047a6:	e02d      	b.n	8004804 <UART_Start_Receive_IT+0xa4>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	22ff      	movs	r2, #255	@ 0xff
 80047ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047b0:	e028      	b.n	8004804 <UART_Start_Receive_IT+0xa4>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10d      	bne.n	80047d6 <UART_Start_Receive_IT+0x76>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <UART_Start_Receive_IT+0x6c>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	22ff      	movs	r2, #255	@ 0xff
 80047c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047ca:	e01b      	b.n	8004804 <UART_Start_Receive_IT+0xa4>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	227f      	movs	r2, #127	@ 0x7f
 80047d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047d4:	e016      	b.n	8004804 <UART_Start_Receive_IT+0xa4>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047de:	d10d      	bne.n	80047fc <UART_Start_Receive_IT+0x9c>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <UART_Start_Receive_IT+0x92>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	227f      	movs	r2, #127	@ 0x7f
 80047ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047f0:	e008      	b.n	8004804 <UART_Start_Receive_IT+0xa4>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	223f      	movs	r2, #63	@ 0x3f
 80047f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047fa:	e003      	b.n	8004804 <UART_Start_Receive_IT+0xa4>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2222      	movs	r2, #34	@ 0x22
 8004810:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3308      	adds	r3, #8
 800481a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004824:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3308      	adds	r3, #8
 8004834:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004838:	673a      	str	r2, [r7, #112]	@ 0x70
 800483a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800483e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e3      	bne.n	8004814 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004854:	d14f      	bne.n	80048f6 <UART_Start_Receive_IT+0x196>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800485c:	88fa      	ldrh	r2, [r7, #6]
 800485e:	429a      	cmp	r2, r3
 8004860:	d349      	bcc.n	80048f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486a:	d107      	bne.n	800487c <UART_Start_Receive_IT+0x11c>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a47      	ldr	r2, [pc, #284]	@ (8004994 <UART_Start_Receive_IT+0x234>)
 8004878:	675a      	str	r2, [r3, #116]	@ 0x74
 800487a:	e002      	b.n	8004882 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a46      	ldr	r2, [pc, #280]	@ (8004998 <UART_Start_Receive_IT+0x238>)
 8004880:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01a      	beq.n	80048c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800489e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80048b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80048ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e4      	bne.n	800488a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3308      	adds	r3, #8
 80048c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80048e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80048e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80048ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e5      	bne.n	80048c0 <UART_Start_Receive_IT+0x160>
 80048f4:	e046      	b.n	8004984 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048fe:	d107      	bne.n	8004910 <UART_Start_Receive_IT+0x1b0>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a24      	ldr	r2, [pc, #144]	@ (800499c <UART_Start_Receive_IT+0x23c>)
 800490c:	675a      	str	r2, [r3, #116]	@ 0x74
 800490e:	e002      	b.n	8004916 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a23      	ldr	r2, [pc, #140]	@ (80049a0 <UART_Start_Receive_IT+0x240>)
 8004914:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d019      	beq.n	8004952 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004932:	677b      	str	r3, [r7, #116]	@ 0x74
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
 800493e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004942:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800494a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e6      	bne.n	800491e <UART_Start_Receive_IT+0x1be>
 8004950:	e018      	b.n	8004984 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	613b      	str	r3, [r7, #16]
   return(result);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f043 0320 	orr.w	r3, r3, #32
 8004966:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	69f9      	ldr	r1, [r7, #28]
 8004976:	6a3a      	ldr	r2, [r7, #32]
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	61bb      	str	r3, [r7, #24]
   return(result);
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e6      	bne.n	8004952 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	378c      	adds	r7, #140	@ 0x8c
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	08005505 	.word	0x08005505
 8004998:	080051a1 	.word	0x080051a1
 800499c:	08004fe9 	.word	0x08004fe9
 80049a0:	08004e31 	.word	0x08004e31

080049a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b095      	sub	sp, #84	@ 0x54
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80049cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e6      	bne.n	80049ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3308      	adds	r3, #8
 80049e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3308      	adds	r3, #8
 8004a00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e3      	bne.n	80049de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d118      	bne.n	8004a50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f023 0310 	bic.w	r3, r3, #16
 8004a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	6979      	ldr	r1, [r7, #20]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e6      	bne.n	8004a1e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a64:	bf00      	nop
 8004a66:	3754      	adds	r7, #84	@ 0x54
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7ff f9aa 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b08f      	sub	sp, #60	@ 0x3c
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa2:	2b21      	cmp	r3, #33	@ 0x21
 8004aa4:	d14c      	bne.n	8004b40 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d132      	bne.n	8004b18 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e6      	bne.n	8004ab2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6979      	ldr	r1, [r7, #20]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e6      	bne.n	8004ae4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004b16:	e013      	b.n	8004b40 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004b40:	bf00      	nop
 8004b42:	373c      	adds	r7, #60	@ 0x3c
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b091      	sub	sp, #68	@ 0x44
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5a:	2b21      	cmp	r3, #33	@ 0x21
 8004b5c:	d151      	bne.n	8004c02 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d132      	bne.n	8004bd0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	623b      	str	r3, [r7, #32]
   return(result);
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e6      	bne.n	8004b6a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e6      	bne.n	8004b9c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004bce:	e018      	b.n	8004c02 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bea:	1c9a      	adds	r2, r3, #2
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004c02:	bf00      	nop
 8004c04:	3744      	adds	r7, #68	@ 0x44
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b091      	sub	sp, #68	@ 0x44
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1c:	2b21      	cmp	r3, #33	@ 0x21
 8004c1e:	d160      	bne.n	8004ce2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004c26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c28:	e057      	b.n	8004cda <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d133      	bne.n	8004c9e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	623b      	str	r3, [r7, #32]
   return(result);
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3308      	adds	r3, #8
 8004c54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c56:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e5      	bne.n	8004c36 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	69b9      	ldr	r1, [r7, #24]
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	617b      	str	r3, [r7, #20]
   return(result);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e6      	bne.n	8004c6a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004c9c:	e021      	b.n	8004ce2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d013      	beq.n	8004cd4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004cd4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004cda:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1a4      	bne.n	8004c2a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004ce0:	e7ff      	b.n	8004ce2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004ce2:	bf00      	nop
 8004ce4:	3744      	adds	r7, #68	@ 0x44
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b091      	sub	sp, #68	@ 0x44
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfc:	2b21      	cmp	r3, #33	@ 0x21
 8004cfe:	d165      	bne.n	8004dcc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004d08:	e05c      	b.n	8004dc4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d133      	bne.n	8004d7e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e5      	bne.n	8004d16 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6979      	ldr	r1, [r7, #20]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	613b      	str	r3, [r7, #16]
   return(result);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e6      	bne.n	8004d4a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004d7c:	e026      	b.n	8004dcc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d018      	beq.n	8004dbe <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d90:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da6:	1c9a      	adds	r2, r3, #2
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004dbe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004dc4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d19f      	bne.n	8004d0a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004dca:	e7ff      	b.n	8004dcc <UART_TxISR_16BIT_FIFOEN+0xde>
 8004dcc:	bf00      	nop
 8004dce:	3744      	adds	r7, #68	@ 0x44
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e6      	bne.n	8004de0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7fe ffc9 	bl	8003db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e26:	bf00      	nop
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b09c      	sub	sp, #112	@ 0x70
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004e3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e48:	2b22      	cmp	r3, #34	@ 0x22
 8004e4a:	f040 80be 	bne.w	8004fca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e5c:	b2d9      	uxtb	r1, r3
 8004e5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e68:	400a      	ands	r2, r1
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f040 80a1 	bne.w	8004fda <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004eb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ebc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e6      	bne.n	8004e98 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004eea:	647a      	str	r2, [r7, #68]	@ 0x44
 8004eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e5      	bne.n	8004eca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a33      	ldr	r2, [pc, #204]	@ (8004fe4 <UART_RxISR_8BIT+0x1b4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d01f      	beq.n	8004f5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d018      	beq.n	8004f5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	623b      	str	r3, [r7, #32]
   return(result);
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e6      	bne.n	8004f2a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d12e      	bne.n	8004fc2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0310 	bic.w	r3, r3, #16
 8004f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	69b9      	ldr	r1, [r7, #24]
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	617b      	str	r3, [r7, #20]
   return(result);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e6      	bne.n	8004f6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d103      	bne.n	8004fb2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2210      	movs	r2, #16
 8004fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fb ffee 	bl	8000f9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fc0:	e00b      	b.n	8004fda <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fe ff02 	bl	8003dcc <HAL_UART_RxCpltCallback>
}
 8004fc8:	e007      	b.n	8004fda <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0208 	orr.w	r2, r2, #8
 8004fd8:	619a      	str	r2, [r3, #24]
}
 8004fda:	bf00      	nop
 8004fdc:	3770      	adds	r7, #112	@ 0x70
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40008000 	.word	0x40008000

08004fe8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b09c      	sub	sp, #112	@ 0x70
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004ff6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005000:	2b22      	cmp	r3, #34	@ 0x22
 8005002:	f040 80be 	bne.w	8005182 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005014:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005016:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800501a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800501e:	4013      	ands	r3, r2
 8005020:	b29a      	uxth	r2, r3
 8005022:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005024:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502a:	1c9a      	adds	r2, r3, #2
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 80a1 	bne.w	8005192 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800505e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005064:	667b      	str	r3, [r7, #100]	@ 0x64
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800506e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005070:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005074:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800507c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	663b      	str	r3, [r7, #96]	@ 0x60
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80050a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a33      	ldr	r2, [pc, #204]	@ (800519c <UART_RxISR_16BIT+0x1b4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d01f      	beq.n	8005114 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d018      	beq.n	8005114 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005102:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e6      	bne.n	80050e2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d12e      	bne.n	800517a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f023 0310 	bic.w	r3, r3, #16
 8005136:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6979      	ldr	r1, [r7, #20]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	613b      	str	r3, [r7, #16]
   return(result);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b10      	cmp	r3, #16
 8005160:	d103      	bne.n	800516a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2210      	movs	r2, #16
 8005168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fb ff12 	bl	8000f9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005178:	e00b      	b.n	8005192 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fe fe26 	bl	8003dcc <HAL_UART_RxCpltCallback>
}
 8005180:	e007      	b.n	8005192 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0208 	orr.w	r2, r2, #8
 8005190:	619a      	str	r2, [r3, #24]
}
 8005192:	bf00      	nop
 8005194:	3770      	adds	r7, #112	@ 0x70
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40008000 	.word	0x40008000

080051a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b0ac      	sub	sp, #176	@ 0xb0
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80051ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051d6:	2b22      	cmp	r3, #34	@ 0x22
 80051d8:	f040 8183 	bne.w	80054e2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80051e2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051e6:	e126      	b.n	8005436 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80051f6:	b2d9      	uxtb	r1, r3
 80051f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005202:	400a      	ands	r2, r1
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800522e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	2b00      	cmp	r3, #0
 8005238:	d053      	beq.n	80052e2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800523a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d011      	beq.n	800526a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800524a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00b      	beq.n	800526a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2201      	movs	r2, #1
 8005258:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005260:	f043 0201 	orr.w	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800526a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d011      	beq.n	800529a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00b      	beq.n	800529a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2202      	movs	r2, #2
 8005288:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005290:	f043 0204 	orr.w	r2, r3, #4
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800529a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d011      	beq.n	80052ca <UART_RxISR_8BIT_FIFOEN+0x12a>
 80052a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2204      	movs	r2, #4
 80052b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c0:	f043 0202 	orr.w	r2, r3, #2
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d006      	beq.n	80052e2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fe fd83 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f040 80a3 	bne.w	8005436 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80052fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005312:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005314:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005318:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005320:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e4      	bne.n	80052f0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3308      	adds	r3, #8
 800532c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3308      	adds	r3, #8
 800534a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800534e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005350:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005354:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800535c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e1      	bne.n	8005326 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a60      	ldr	r2, [pc, #384]	@ (80054fc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d021      	beq.n	80053c4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01a      	beq.n	80053c4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800539c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800539e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80053b2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80053b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80053be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e4      	bne.n	800538e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d130      	bne.n	800542e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	f023 0310 	bic.w	r3, r3, #16
 80053e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80053f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e4      	bne.n	80053d2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b10      	cmp	r3, #16
 8005414:	d103      	bne.n	800541e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2210      	movs	r2, #16
 800541c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fb fdb8 	bl	8000f9c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800542c:	e00e      	b.n	800544c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fe fccc 	bl	8003dcc <HAL_UART_RxCpltCallback>
        break;
 8005434:	e00a      	b.n	800544c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005436:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800543e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	f47f aece 	bne.w	80051e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005452:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005456:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800545a:	2b00      	cmp	r3, #0
 800545c:	d049      	beq.n	80054f2 <UART_RxISR_8BIT_FIFOEN+0x352>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005464:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005468:	429a      	cmp	r2, r3
 800546a:	d242      	bcs.n	80054f2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	61fb      	str	r3, [r7, #28]
   return(result);
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005482:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3308      	adds	r3, #8
 800548c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005490:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005492:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005498:	e841 2300 	strex	r3, r2, [r1]
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e3      	bne.n	800546c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a16      	ldr	r2, [pc, #88]	@ (8005500 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80054a8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f043 0320 	orr.w	r3, r3, #32
 80054be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6979      	ldr	r1, [r7, #20]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	613b      	str	r3, [r7, #16]
   return(result);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e4      	bne.n	80054aa <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054e0:	e007      	b.n	80054f2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0208 	orr.w	r2, r2, #8
 80054f0:	619a      	str	r2, [r3, #24]
}
 80054f2:	bf00      	nop
 80054f4:	37b0      	adds	r7, #176	@ 0xb0
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40008000 	.word	0x40008000
 8005500:	08004e31 	.word	0x08004e31

08005504 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b0ae      	sub	sp, #184	@ 0xb8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005512:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800553a:	2b22      	cmp	r3, #34	@ 0x22
 800553c:	f040 8187 	bne.w	800584e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005546:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800554a:	e12a      	b.n	80057a2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800555e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005562:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005566:	4013      	ands	r3, r2
 8005568:	b29a      	uxth	r2, r3
 800556a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800556e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d053      	beq.n	800564a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d011      	beq.n	80055d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80055ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2201      	movs	r2, #1
 80055c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c8:	f043 0201 	orr.w	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d011      	beq.n	8005602 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80055de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2202      	movs	r2, #2
 80055f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f8:	f043 0204 	orr.w	r2, r3, #4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005602:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d011      	beq.n	8005632 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800560e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2204      	movs	r2, #4
 8005620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005628:	f043 0202 	orr.w	r2, r3, #2
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005638:	2b00      	cmp	r3, #0
 800563a:	d006      	beq.n	800564a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7fe fbcf 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	f040 80a5 	bne.w	80057a2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800566c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800567a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800567e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005682:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800568c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e2      	bne.n	8005658 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3308      	adds	r3, #8
 8005698:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80056ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e1      	bne.n	8005692 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a60      	ldr	r2, [pc, #384]	@ (8005868 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d021      	beq.n	8005730 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01a      	beq.n	8005730 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800570a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800570e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800571c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800571e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005722:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800572a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e4      	bne.n	80056fa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d130      	bne.n	800579a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800574c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574e:	f023 0310 	bic.w	r3, r3, #16
 8005752:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005760:	647b      	str	r3, [r7, #68]	@ 0x44
 8005762:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800576e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e4      	bne.n	800573e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b10      	cmp	r3, #16
 8005780:	d103      	bne.n	800578a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2210      	movs	r2, #16
 8005788:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fb fc02 	bl	8000f9c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005798:	e00e      	b.n	80057b8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fe fb16 	bl	8003dcc <HAL_UART_RxCpltCallback>
        break;
 80057a0:	e00a      	b.n	80057b8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057a2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d006      	beq.n	80057b8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80057aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f47f aeca 	bne.w	800554c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057be:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80057c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d049      	beq.n	800585e <UART_RxISR_16BIT_FIFOEN+0x35a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80057d0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d242      	bcs.n	800585e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3308      	adds	r3, #8
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	623b      	str	r3, [r7, #32]
   return(result);
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80057fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80057fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e3      	bne.n	80057d8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a16      	ldr	r2, [pc, #88]	@ (800586c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8005814:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	60fb      	str	r3, [r7, #12]
   return(result);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f043 0320 	orr.w	r3, r3, #32
 800582a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	69b9      	ldr	r1, [r7, #24]
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	617b      	str	r3, [r7, #20]
   return(result);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e4      	bne.n	8005816 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800584c:	e007      	b.n	800585e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0208 	orr.w	r2, r2, #8
 800585c:	619a      	str	r2, [r3, #24]
}
 800585e:	bf00      	nop
 8005860:	37b8      	adds	r7, #184	@ 0xb8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40008000 	.word	0x40008000
 800586c:	08004fe9 	.word	0x08004fe9

08005870 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80058be:	2302      	movs	r3, #2
 80058c0:	e027      	b.n	8005912 <HAL_UARTEx_DisableFifoMode+0x66>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2224      	movs	r2, #36	@ 0x24
 80058ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80058f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005932:	2302      	movs	r3, #2
 8005934:	e02d      	b.n	8005992 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2224      	movs	r2, #36	@ 0x24
 8005942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0201 	bic.w	r2, r2, #1
 800595c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f8a0 	bl	8005ab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e02d      	b.n	8005a0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2224      	movs	r2, #36	@ 0x24
 80059be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f862 	bl	8005ab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b08c      	sub	sp, #48	@ 0x30
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	4613      	mov	r3, r2
 8005a22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d13b      	bne.n	8005aac <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e034      	b.n	8005aae <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7fe fe82 	bl	8004760 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d11d      	bne.n	8005aa0 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2210      	movs	r2, #16
 8005a6a:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f043 0310 	orr.w	r3, r3, #16
 8005a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a8c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6a39      	ldr	r1, [r7, #32]
 8005a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e6      	bne.n	8005a6c <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8005a9e:	e002      	b.n	8005aa6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8005aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005aaa:	e000      	b.n	8005aae <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8005aac:	2302      	movs	r3, #2
  }
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3730      	adds	r7, #48	@ 0x30
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d108      	bne.n	8005ada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ad8:	e031      	b.n	8005b3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ada:	2308      	movs	r3, #8
 8005adc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ade:	2308      	movs	r3, #8
 8005ae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	0e5b      	lsrs	r3, r3, #25
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	0f5b      	lsrs	r3, r3, #29
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b02:	7bbb      	ldrb	r3, [r7, #14]
 8005b04:	7b3a      	ldrb	r2, [r7, #12]
 8005b06:	4911      	ldr	r1, [pc, #68]	@ (8005b4c <UARTEx_SetNbDataToProcess+0x94>)
 8005b08:	5c8a      	ldrb	r2, [r1, r2]
 8005b0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b0e:	7b3a      	ldrb	r2, [r7, #12]
 8005b10:	490f      	ldr	r1, [pc, #60]	@ (8005b50 <UARTEx_SetNbDataToProcess+0x98>)
 8005b12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b14:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	7b7a      	ldrb	r2, [r7, #13]
 8005b24:	4909      	ldr	r1, [pc, #36]	@ (8005b4c <UARTEx_SetNbDataToProcess+0x94>)
 8005b26:	5c8a      	ldrb	r2, [r1, r2]
 8005b28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b2c:	7b7a      	ldrb	r2, [r7, #13]
 8005b2e:	4908      	ldr	r1, [pc, #32]	@ (8005b50 <UARTEx_SetNbDataToProcess+0x98>)
 8005b30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b32:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	08005c24 	.word	0x08005c24
 8005b50:	08005c2c 	.word	0x08005c2c

08005b54 <memcmp>:
 8005b54:	b510      	push	{r4, lr}
 8005b56:	3901      	subs	r1, #1
 8005b58:	4402      	add	r2, r0
 8005b5a:	4290      	cmp	r0, r2
 8005b5c:	d101      	bne.n	8005b62 <memcmp+0xe>
 8005b5e:	2000      	movs	r0, #0
 8005b60:	e005      	b.n	8005b6e <memcmp+0x1a>
 8005b62:	7803      	ldrb	r3, [r0, #0]
 8005b64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b68:	42a3      	cmp	r3, r4
 8005b6a:	d001      	beq.n	8005b70 <memcmp+0x1c>
 8005b6c:	1b18      	subs	r0, r3, r4
 8005b6e:	bd10      	pop	{r4, pc}
 8005b70:	3001      	adds	r0, #1
 8005b72:	e7f2      	b.n	8005b5a <memcmp+0x6>

08005b74 <memset>:
 8005b74:	4402      	add	r2, r0
 8005b76:	4603      	mov	r3, r0
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d100      	bne.n	8005b7e <memset+0xa>
 8005b7c:	4770      	bx	lr
 8005b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b82:	e7f9      	b.n	8005b78 <memset+0x4>

08005b84 <__libc_init_array>:
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	4d0d      	ldr	r5, [pc, #52]	@ (8005bbc <__libc_init_array+0x38>)
 8005b88:	4c0d      	ldr	r4, [pc, #52]	@ (8005bc0 <__libc_init_array+0x3c>)
 8005b8a:	1b64      	subs	r4, r4, r5
 8005b8c:	10a4      	asrs	r4, r4, #2
 8005b8e:	2600      	movs	r6, #0
 8005b90:	42a6      	cmp	r6, r4
 8005b92:	d109      	bne.n	8005ba8 <__libc_init_array+0x24>
 8005b94:	4d0b      	ldr	r5, [pc, #44]	@ (8005bc4 <__libc_init_array+0x40>)
 8005b96:	4c0c      	ldr	r4, [pc, #48]	@ (8005bc8 <__libc_init_array+0x44>)
 8005b98:	f000 f818 	bl	8005bcc <_init>
 8005b9c:	1b64      	subs	r4, r4, r5
 8005b9e:	10a4      	asrs	r4, r4, #2
 8005ba0:	2600      	movs	r6, #0
 8005ba2:	42a6      	cmp	r6, r4
 8005ba4:	d105      	bne.n	8005bb2 <__libc_init_array+0x2e>
 8005ba6:	bd70      	pop	{r4, r5, r6, pc}
 8005ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bac:	4798      	blx	r3
 8005bae:	3601      	adds	r6, #1
 8005bb0:	e7ee      	b.n	8005b90 <__libc_init_array+0xc>
 8005bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb6:	4798      	blx	r3
 8005bb8:	3601      	adds	r6, #1
 8005bba:	e7f2      	b.n	8005ba2 <__libc_init_array+0x1e>
 8005bbc:	08005c3c 	.word	0x08005c3c
 8005bc0:	08005c3c 	.word	0x08005c3c
 8005bc4:	08005c3c 	.word	0x08005c3c
 8005bc8:	08005c40 	.word	0x08005c40

08005bcc <_init>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	bf00      	nop
 8005bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd2:	bc08      	pop	{r3}
 8005bd4:	469e      	mov	lr, r3
 8005bd6:	4770      	bx	lr

08005bd8 <_fini>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr
